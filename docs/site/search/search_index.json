{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WaddleBot Documentation","text":"<p>Welcome to the WaddleBot documentation! WaddleBot is a multi-platform chat bot system with a modular, microservices architecture designed for Discord, Twitch, and Slack communities.</p>"},{"location":"#what-is-waddlebot","title":"What is WaddleBot?","text":"<p>WaddleBot is a comprehensive chat bot framework built for scalability and extensibility. The system consists of:</p> <ul> <li>Core Components: Central API layer with routing, marketplace, and identity management</li> <li>Collector Modules: Platform-specific modules that receive webhooks/chat from platforms</li> <li>Interaction Modules: Modular functionality executed in containers or serverless functions</li> <li>Administration Tools: Community management portal and admin interfaces</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#modular-architecture","title":"\ud83c\udfd7\ufe0f Modular Architecture","text":"<ul> <li>Microservices-based design with independent, scalable components</li> <li>Docker containerization with Kubernetes orchestration</li> <li>Horizontal scaling with dynamic server/channel assignment</li> </ul>"},{"location":"#multi-platform-support","title":"\ud83c\udf10 Multi-Platform Support","text":"<ul> <li>Discord: Native py-cord integration with slash commands and events</li> <li>Twitch: EventSub webhooks with OAuth and Helix API integration</li> <li>Slack: Event API with slash commands and Socket Mode support</li> </ul>"},{"location":"#high-performance","title":"\u26a1 High Performance","text":"<ul> <li>Multi-threaded command processing with ThreadPoolExecutor</li> <li>Redis caching and PostgreSQL with read replicas</li> <li>Kong API Gateway for unified routing and rate limiting</li> </ul>"},{"location":"#extensive-functionality","title":"\ud83d\udd27 Extensive Functionality","text":"<ul> <li>AI-powered interactions with multiple provider support (Ollama, OpenAI, MCP)</li> <li>Music integration (YouTube Music, Spotify) with OBS browser sources</li> <li>Community management tools (inventory, calendar, memories, labels)</li> <li>Cross-platform identity linking and verification</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"Quick StartProduction Deployment <ol> <li> <p>Clone the repository <pre><code>git clone https://github.com/WaddleBot/WaddleBot.git\ncd WaddleBot\n</code></pre></p> </li> <li> <p>Start with Docker Compose <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Configure your platforms</p> </li> <li>Set up your Discord, Twitch, or Slack applications</li> <li>Configure environment variables</li> <li>Deploy collector modules</li> </ol> <p>For production deployments, see our Deployment Guide which covers:</p> <ul> <li>Kubernetes deployment</li> <li>Kong API Gateway configuration</li> <li>PostgreSQL with read replicas</li> <li>Redis cluster setup</li> <li>SSL/TLS termination</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[Discord/Twitch/Slack] --&gt; B[Collector Modules]\n    B --&gt; C[Kong API Gateway]\n    C --&gt; D[Router Module]\n    D --&gt; E[Interaction Modules]\n    D --&gt; F[Database]\n    E --&gt; G[Browser Sources]\n    E --&gt; H[External APIs]\n\n    subgraph \"Core System\"\n        D\n        I[Marketplace]\n        J[Identity Core]\n        K[Labels Core]\n    end\n\n    subgraph \"Storage\"\n        F[PostgreSQL]\n        L[Redis]\n    end</code></pre>"},{"location":"#core-components","title":"Core Components","text":"Component Description Technology Router Module High-performance command routing with caching py4web, Python 3.12 Marketplace Community module marketplace and management py4web, PostgreSQL Identity Core Cross-platform identity linking and verification py4web Auth, Redis Labels Core Multi-threaded label management for communities Python, ThreadPoolExecutor Portal Module Community management web interface py4web, HTML/CSS Browser Sources OBS integration with WebSocket updates WebSocket, HTML/JS"},{"location":"#why-choose-waddlebot","title":"Why Choose WaddleBot?","text":""},{"location":"#for-community-managers","title":"\u2705 For Community Managers","text":"<ul> <li>Unified management across Discord, Twitch, and Slack</li> <li>Rich web portal for community administration</li> <li>Comprehensive user identity and reputation system</li> </ul>"},{"location":"#for-developers","title":"\u2705 For Developers","text":"<ul> <li>Modern Python stack with py4web framework</li> <li>Extensive API for custom module development</li> <li>Marketplace for sharing and monetizing modules</li> </ul>"},{"location":"#for-streamers","title":"\u2705 For Streamers","text":"<ul> <li>OBS browser source integration for overlays</li> <li>Music integration with YouTube and Spotify</li> <li>Automated shoutouts and community engagement</li> </ul>"},{"location":"#not-right-for-you-if","title":"\u274c Not Right For You If","text":"<ul> <li>You need a simple, single-platform bot</li> <li>You prefer hosted solutions over self-hosting</li> <li>You don't need advanced community management features</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started Guide - Step-by-step setup instructions</li> <li>API Documentation - Complete API reference</li> <li>Deployment Guide - Production deployment instructions</li> <li>Contributing - How to contribute to the project</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: WaddleBot/WaddleBot</li> <li>Issues: Report bugs and request features on GitHub</li> <li>Documentation: This site for comprehensive guides and API docs</li> </ul> <p>Getting Help</p> <p>New to WaddleBot? Start with our Usage Guide for step-by-step setup instructions.</p>"},{"location":"CONTRIBUTION/","title":"Overview","text":"<p>Describe the method and intent of contribution. Is it open to all? PenguinTech only?</p>"},{"location":"CONTRIBUTION/#merging","title":"Merging","text":"<p>Describe the process for merging code into these projects</p>"},{"location":"CONTRIBUTION/#gettings-started","title":"Gettings started","text":""},{"location":"CONTRIBUTION/#cloning-into-dev","title":"Cloning into Dev","text":"<p>Describe how to setup a local development environment for all or one product within this project</p>"},{"location":"CONTRIBUTION/#resources","title":"Resources","text":"<p>Any resources which may be helpful for development, such as links to other sites which can help (such as the applications docs)</p> <p>Feel free to add anything else here you would want to give yourself if you were just assigned this project to start working on for the first time.</p>"},{"location":"USAGE/","title":"Overview / introduction into our instruction","text":"<ul> <li>Call out the DOS case, for example and an example .env file</li> </ul>"},{"location":"USAGE/#build-options","title":"Build options","text":"<p>Define your ARGUMENT variables for docker build process across the different products. It should be have an h2 per product</p>"},{"location":"USAGE/#run-options","title":"Run options","text":"<p>Define your ENVIRONMENT variables for docker build process across the different products. It should be have an h2 per product Be sure to explain the available options (if only a few select good options) and what the variable effects. </p>"},{"location":"deployment-guide/","title":"WaddleBot Deployment Guide","text":""},{"location":"deployment-guide/#overview","title":"Overview","text":"<p>This guide covers the complete deployment of WaddleBot's multi-platform chat bot system using Docker, Kubernetes, and CI/CD pipelines. WaddleBot follows a microservices architecture with separate containers for core services, collectors, and interaction modules.</p>"},{"location":"deployment-guide/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment-guide/#system-requirements","title":"System Requirements","text":"<ul> <li>Docker: Version 20.04 or higher</li> <li>Kubernetes: Version 1.24 or higher (for K8s deployment)</li> <li>PostgreSQL: Version 13 or higher</li> <li>Redis: Version 6 or higher</li> <li>Minimum Resources: 4 CPU cores, 8GB RAM, 50GB storage</li> </ul>"},{"location":"deployment-guide/#required-services","title":"Required Services","text":"<ol> <li>Database Services</li> <li>PostgreSQL primary database</li> <li>PostgreSQL read replica (optional, recommended for production)</li> <li> <p>Redis for session management and caching</p> </li> <li> <p>External Services</p> </li> <li>Kong API Gateway</li> <li>Container registry (Docker Hub, GHCR, etc.)</li> <li>Monitoring stack (Prometheus, Grafana)</li> </ol>"},{"location":"deployment-guide/#deployment-methods","title":"Deployment Methods","text":""},{"location":"deployment-guide/#1-docker-compose-developmenttesting","title":"1. Docker Compose (Development/Testing)","text":""},{"location":"deployment-guide/#environment-configuration","title":"Environment Configuration","text":"<p>Create a <code>.env</code> file with all required environment variables:</p> <pre><code># Database Configuration\nPOSTGRES_USER=waddlebot\nPOSTGRES_PASSWORD=secure_password_here\nPOSTGRES_DB=waddlebot\nDATABASE_URL=postgresql://waddlebot:secure_password_here@db:5432/waddlebot\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_DB=0\nREDIS_PASSWORD=redis_password_here\n\n# Module Versions\nMODULE_VERSION=1.0.0\n\n# Core Modules\nMODULE_NAME_ROUTER=router\nMODULE_NAME_MARKETPLACE=marketplace\nMODULE_NAME_PORTAL=portal\n\n# Collector Modules\nMODULE_NAME_TWITCH=twitch\nMODULE_NAME_DISCORD=discord\nMODULE_NAME_SLACK=slack\n\n# Interaction Modules\nMODULE_NAME_AI=ai_interaction\nMODULE_NAME_INVENTORY=inventory_interaction_module\nMODULE_NAME_LABELS=labels_core\nMODULE_NAME_ALIAS=alias_interaction\nMODULE_NAME_SHOUTOUT=shoutout_interaction\n\n# Kong Admin Broker\nMODULE_NAME_KONG_BROKER=kong_admin_broker\n\n# API URLs\nCORE_API_URL=http://router:8000\nROUTER_API_URL=http://router:8000/router\nCONTEXT_API_URL=http://router:8000/api/context\nREPUTATION_API_URL=http://router:8000/api/reputation\n\n# Performance Settings\nROUTER_MAX_WORKERS=20\nROUTER_MAX_CONCURRENT=100\nMAX_WORKERS=20\nCACHE_TTL=300\nREQUEST_TIMEOUT=30\nMAX_LABELS_PER_ITEM=5\n\n# Platform API Keys (Set your actual values)\nTWITCH_APP_ID=your_twitch_app_id\nTWITCH_APP_SECRET=your_twitch_app_secret\nTWITCH_WEBHOOK_SECRET=your_webhook_secret\n\nDISCORD_BOT_TOKEN=your_discord_bot_token\nDISCORD_APPLICATION_ID=your_discord_app_id\nDISCORD_PUBLIC_KEY=your_discord_public_key\n\nSLACK_BOT_TOKEN=xoxb-your-slack-bot-token\nSLACK_APP_TOKEN=xapp-your-slack-app-token\nSLACK_CLIENT_ID=your_slack_client_id\nSLACK_CLIENT_SECRET=your_slack_client_secret\nSLACK_SIGNING_SECRET=your_slack_signing_secret\n\n# AI Configuration\nAI_PROVIDER=ollama\nAI_HOST=http://ollama:11434\nAI_MODEL=llama3.2\nAI_TEMPERATURE=0.7\nAI_MAX_TOKENS=500\n\n# Logging Configuration\nLOG_LEVEL=INFO\nLOG_DIR=/var/log/waddlebotlog\nENABLE_SYSLOG=false\nSYSLOG_HOST=localhost\nSYSLOG_PORT=514\nSYSLOG_FACILITY=LOCAL0\n\n# Kong Configuration\nKONG_ADMIN_URL=http://kong:8001\nKONG_ADMIN_USERNAME=admin\nKONG_ADMIN_PASSWORD=admin_password\n\n# Broker Configuration\nBROKER_SECRET_KEY=waddlebot_broker_secret_key_change_me_in_production\nBROKER_API_KEY=wbot_broker_master_key_placeholder\n</code></pre>"},{"location":"deployment-guide/#deploy-with-docker-compose","title":"Deploy with Docker Compose","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/WaddleBot.git\ncd WaddleBot\n\n# Create and configure environment file\ncp .env.example .env\n# Edit .env with your configuration\n\n# Create log directory\nsudo mkdir -p /var/log/waddlebotlog\nsudo chown $USER:$USER /var/log/waddlebotlog\n\n# Build and start services\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f router\n</code></pre>"},{"location":"deployment-guide/#2-kubernetes-deployment-production","title":"2. Kubernetes Deployment (Production)","text":""},{"location":"deployment-guide/#namespace-setup","title":"Namespace Setup","text":"<pre><code># namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: waddlebot\n  labels:\n    name: waddlebot\n</code></pre>"},{"location":"deployment-guide/#secret-management","title":"Secret Management","text":"<pre><code># secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: waddlebot-secrets\n  namespace: waddlebot\ntype: Opaque\nstringData:\n  database-url: \"postgresql://user:password@postgres:5432/waddlebot\"\n  redis-password: \"redis_password_here\"\n  twitch-app-secret: \"your_twitch_app_secret\"\n  discord-bot-token: \"your_discord_bot_token\"\n  slack-client-secret: \"your_slack_client_secret\"\n  broker-secret-key: \"waddlebot_broker_secret_key\"\n</code></pre>"},{"location":"deployment-guide/#configmap","title":"ConfigMap","text":"<pre><code># configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: waddlebot-config\n  namespace: waddlebot\ndata:\n  LOG_LEVEL: \"INFO\"\n  MAX_WORKERS: \"20\"\n  CACHE_TTL: \"300\"\n  MODULE_VERSION: \"1.0.0\"\n  AI_PROVIDER: \"ollama\"\n  AI_MODEL: \"llama3.2\"\n</code></pre>"},{"location":"deployment-guide/#core-services-deployment","title":"Core Services Deployment","text":"<pre><code># router-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: router\n  namespace: waddlebot\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: router\n  template:\n    metadata:\n      labels:\n        app: router\n    spec:\n      containers:\n      - name: router\n        image: ghcr.io/your-org/waddlebot/router:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: waddlebot-secrets\n              key: database-url\n        - name: REDIS_HOST\n          value: \"redis\"\n        - name: MODULE_NAME\n          value: \"router\"\n        envFrom:\n        - configMapRef:\n            name: waddlebot-config\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /router/health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /router/health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: log-volume\n          mountPath: /var/log/waddlebotlog\n      volumes:\n      - name: log-volume\n        persistentVolumeClaim:\n          claimName: waddlebot-logs-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: router\n  namespace: waddlebot\nspec:\n  selector:\n    app: router\n  ports:\n  - port: 8000\n    targetPort: 8000\n  type: ClusterIP\n</code></pre>"},{"location":"deployment-guide/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code># hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: router-hpa\n  namespace: waddlebot\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: router\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment-guide/#persistent-storage","title":"Persistent Storage","text":"<pre><code># pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: waddlebot-logs-pvc\n  namespace: waddlebot\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: fast-ssd\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-data-pvc\n  namespace: waddlebot\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Gi\n  storageClassName: fast-ssd\n</code></pre>"},{"location":"deployment-guide/#deploy-to-kubernetes","title":"Deploy to Kubernetes","text":"<pre><code># Apply namespace and basic resources\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/secrets.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/pvc.yaml\n\n# Deploy core services\nkubectl apply -f k8s/postgres-deployment.yaml\nkubectl apply -f k8s/redis-deployment.yaml\nkubectl apply -f k8s/router-deployment.yaml\nkubectl apply -f k8s/marketplace-deployment.yaml\n\n# Deploy collectors\nkubectl apply -f k8s/twitch-deployment.yaml\nkubectl apply -f k8s/discord-deployment.yaml\nkubectl apply -f k8s/slack-deployment.yaml\n\n# Deploy interaction modules\nkubectl apply -f k8s/ai-interaction-deployment.yaml\nkubectl apply -f k8s/inventory-interaction-deployment.yaml\nkubectl apply -f k8s/labels-core-deployment.yaml\n\n# Deploy autoscaling\nkubectl apply -f k8s/hpa.yaml\n\n# Check deployment status\nkubectl get pods -n waddlebot\nkubectl get services -n waddlebot\n</code></pre>"},{"location":"deployment-guide/#cicd-pipeline-setup","title":"CI/CD Pipeline Setup","text":""},{"location":"deployment-guide/#github-actions-configuration","title":"GitHub Actions Configuration","text":"<p>The repository includes comprehensive GitHub Actions workflows:</p> <ol> <li>containers.yml: Builds and tests all container modules</li> <li>ci-cd.yml: Main CI/CD pipeline with security scanning</li> <li>android.yml: Android app building and testing</li> <li>desktop-bridge.yml: Golang desktop bridge compilation</li> </ol>"},{"location":"deployment-guide/#secrets-configuration","title":"Secrets Configuration","text":"<p>Configure these secrets in your GitHub repository:</p> <pre><code># Container Registry\nREGISTRY_USERNAME=your_registry_username\nREGISTRY_PASSWORD=your_registry_password\n\n# Kubernetes\nKUBE_CONFIG=base64_encoded_kubeconfig\n\n# Monitoring\nGRAFANA_API_KEY=your_grafana_api_key\nPROMETHEUS_URL=your_prometheus_url\n\n# Security Scanning\nSNYK_TOKEN=your_snyk_token\nCODECOV_TOKEN=your_codecov_token\n</code></pre>"},{"location":"deployment-guide/#automated-deployment","title":"Automated Deployment","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*' ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'v1.24.0'\n\n      - name: Configure kubectl\n        run: |\n          echo \"${{ secrets.KUBE_CONFIG }}\" | base64 -d &gt; kubeconfig\n          export KUBECONFIG=kubeconfig\n\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl set image deployment/router router=ghcr.io/${{ github.repository }}/router:${{ github.sha }} -n waddlebot\n          kubectl set image deployment/marketplace marketplace=ghcr.io/${{ github.repository }}/marketplace:${{ github.sha }} -n waddlebot\n          kubectl rollout status deployment/router -n waddlebot\n          kubectl rollout status deployment/marketplace -n waddlebot\n</code></pre>"},{"location":"deployment-guide/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment-guide/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># prometheus-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n\n    scrape_configs:\n    - job_name: 'waddlebot-router'\n      static_configs:\n      - targets: ['router.waddlebot:8000']\n      metrics_path: '/router/metrics'\n\n    - job_name: 'waddlebot-inventory'\n      static_configs:\n      - targets: ['inventory-interaction.waddlebot:8024']\n      metrics_path: '/metrics'\n\n    rule_files:\n    - \"/etc/prometheus/rules/*.yml\"\n\n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets:\n          - alertmanager:9093\n</code></pre>"},{"location":"deployment-guide/#grafana-dashboards","title":"Grafana Dashboards","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"WaddleBot Overview\",\n    \"panels\": [\n      {\n        \"title\": \"Request Rate\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(waddlebot_requests_total[5m])\",\n            \"legendFormat\": \"{{module}} - {{method}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Error Rate\",\n        \"type\": \"singlestat\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(waddlebot_errors_total[5m]) / rate(waddlebot_requests_total[5m]) * 100\",\n            \"legendFormat\": \"Error Rate %\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Response Time\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, rate(waddlebot_request_duration_seconds_bucket[5m]))\",\n            \"legendFormat\": \"95th percentile\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"deployment-guide/#log-aggregation-with-elk-stack","title":"Log Aggregation with ELK Stack","text":"<pre><code># elasticsearch-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: elasticsearch\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: elasticsearch\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n    spec:\n      containers:\n      - name: elasticsearch\n        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0\n        env:\n        - name: discovery.type\n          value: single-node\n        - name: ES_JAVA_OPTS\n          value: \"-Xms2g -Xmx2g\"\n        ports:\n        - containerPort: 9200\n        volumeMounts:\n        - name: elasticsearch-data\n          mountPath: /usr/share/elasticsearch/data\n      volumes:\n      - name: elasticsearch-data\n        persistentVolumeClaim:\n          claimName: elasticsearch-pvc\n</code></pre>"},{"location":"deployment-guide/#security-configuration","title":"Security Configuration","text":""},{"location":"deployment-guide/#network-policies","title":"Network Policies","text":"<pre><code># network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: waddlebot-network-policy\n  namespace: waddlebot\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: waddlebot\n    ports:\n    - protocol: TCP\n      port: 8000\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: waddlebot\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 5432  # PostgreSQL\n    - protocol: TCP\n      port: 6379  # Redis\n    - protocol: TCP\n      port: 443   # HTTPS\n    - protocol: TCP\n      port: 53    # DNS\n    - protocol: UDP\n      port: 53    # DNS\n</code></pre>"},{"location":"deployment-guide/#pod-security-standards","title":"Pod Security Standards","text":"<pre><code># pod-security-policy.yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: waddlebot-psp\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  fsGroup:\n    rule: 'RunAsAny'\n</code></pre>"},{"location":"deployment-guide/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment-guide/#database-backup","title":"Database Backup","text":"<pre><code>#!/bin/bash\n# backup-database.sh\n\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"/backups/waddlebot_backup_${DATE}.sql\"\n\n# Create backup\nkubectl exec -n waddlebot postgres-primary-0 -- pg_dump -U waddlebot waddlebot &gt; \"${BACKUP_FILE}\"\n\n# Compress backup\ngzip \"${BACKUP_FILE}\"\n\n# Upload to S3 (optional)\naws s3 cp \"${BACKUP_FILE}.gz\" s3://waddlebot-backups/\n\n# Cleanup old backups (keep last 30 days)\nfind /backups -name \"waddlebot_backup_*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: ${BACKUP_FILE}.gz\"\n</code></pre>"},{"location":"deployment-guide/#configuration-backup","title":"Configuration Backup","text":"<pre><code>#!/bin/bash\n# backup-config.sh\n\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups/config_${DATE}\"\n\nmkdir -p \"${BACKUP_DIR}\"\n\n# Backup Kubernetes resources\nkubectl get secrets -n waddlebot -o yaml &gt; \"${BACKUP_DIR}/secrets.yaml\"\nkubectl get configmaps -n waddlebot -o yaml &gt; \"${BACKUP_DIR}/configmaps.yaml\"\nkubectl get deployments -n waddlebot -o yaml &gt; \"${BACKUP_DIR}/deployments.yaml\"\nkubectl get services -n waddlebot -o yaml &gt; \"${BACKUP_DIR}/services.yaml\"\n\n# Create archive\ntar -czf \"${BACKUP_DIR}.tar.gz\" \"${BACKUP_DIR}\"\nrm -rf \"${BACKUP_DIR}\"\n\necho \"Configuration backup completed: ${BACKUP_DIR}.tar.gz\"\n</code></pre>"},{"location":"deployment-guide/#scaling-guidelines","title":"Scaling Guidelines","text":""},{"location":"deployment-guide/#horizontal-scaling","title":"Horizontal Scaling","text":"<ol> <li>Router Module</li> <li>Scale based on CPU usage (target: 70%)</li> <li>Min replicas: 3, Max replicas: 10</li> <li> <p>Consider database connection limits</p> </li> <li> <p>Collector Modules</p> </li> <li>Scale based on platform activity</li> <li>Use coordination system for load distribution</li> <li> <p>Monitor claim utilization</p> </li> <li> <p>Interaction Modules</p> </li> <li>Scale based on request volume</li> <li>Consider AI provider rate limits</li> <li>Monitor response times</li> </ol>"},{"location":"deployment-guide/#vertical-scaling","title":"Vertical Scaling","text":"<ol> <li>Resource Limits</li> <li>Start with modest limits and increase based on monitoring</li> <li>Monitor memory usage patterns</li> <li> <p>Consider JVM/Python GC tuning</p> </li> <li> <p>Storage Scaling</p> </li> <li>Monitor log volume growth</li> <li>Implement log retention policies</li> <li>Consider archival strategies</li> </ol>"},{"location":"deployment-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment-guide/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Service Discovery Problems <pre><code># Check DNS resolution\nkubectl exec -n waddlebot router-xxx -- nslookup postgres\n\n# Check service endpoints\nkubectl get endpoints -n waddlebot\n</code></pre></p> </li> <li> <p>Database Connection Issues <pre><code># Check database connectivity\nkubectl exec -n waddlebot router-xxx -- nc -zv postgres 5432\n\n# Review connection pool settings\nkubectl logs -n waddlebot router-xxx | grep \"connection\"\n</code></pre></p> </li> <li> <p>Log Volume Issues <pre><code># Check log disk usage\nkubectl exec -n waddlebot router-xxx -- df -h /var/log/waddlebotlog\n\n# Cleanup old logs\nkubectl exec -n waddlebot router-xxx -- find /var/log/waddlebotlog -name \"*.log.*\" -mtime +7 -delete\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#health-check-endpoints","title":"Health Check Endpoints","text":"<pre><code># Check all service health\nfor service in router marketplace inventory-interaction; do\n  echo \"Checking $service...\"\n  kubectl exec -n waddlebot deploy/$service -- curl -f http://localhost:8000/health\ndone\n</code></pre>"},{"location":"deployment-guide/#maintenance","title":"Maintenance","text":""},{"location":"deployment-guide/#update-procedures","title":"Update Procedures","text":"<ol> <li> <p>Rolling Updates <pre><code># Update router with zero downtime\nkubectl set image deployment/router router=ghcr.io/org/waddlebot/router:v1.1.0 -n waddlebot\nkubectl rollout status deployment/router -n waddlebot\n</code></pre></p> </li> <li> <p>Database Migrations <pre><code># Run database migrations\nkubectl create job migrate-$(date +%s) --from=cronjob/database-migrate -n waddlebot\nkubectl wait --for=condition=complete job/migrate-$(date +%s) -n waddlebot\n</code></pre></p> </li> <li> <p>Configuration Updates <pre><code># Update configuration\nkubectl apply -f k8s/configmap.yaml\nkubectl rollout restart deployment/router -n waddlebot\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#monitoring-checklist","title":"Monitoring Checklist","text":"<ul> <li> All pods running and healthy</li> <li> Database connections stable</li> <li> Log aggregation working</li> <li> Metrics collection active</li> <li> Alerts configured and firing correctly</li> <li> Backup procedures tested</li> <li> Security scans passing</li> <li> Performance within acceptable ranges</li> </ul> <p>This deployment guide provides a comprehensive foundation for running WaddleBot in production environments with proper monitoring, security, and scalability considerations.</p>"},{"location":"inventory-interaction-module/","title":"Inventory Interaction Module Documentation","text":""},{"location":"inventory-interaction-module/#overview","title":"Overview","text":"<p>The Inventory Interaction Module is a comprehensive multi-threaded system for tracking any item, whether IRL (In Real Life) or in-game. It provides complete CRUD operations with label support, thread-safe caching, and comprehensive Authentication, Authorization, and Auditing (AAA) logging.</p>"},{"location":"inventory-interaction-module/#features","title":"Features","text":"<ul> <li>Multi-Threaded Architecture: ThreadPoolExecutor with configurable workers (default: 20)</li> <li>Item Management: Track any item with full CRUD operations</li> <li>Label System: Support up to 5 labels per item for categorization</li> <li>Caching: High-performance thread-safe caching with TTL</li> <li>AAA Logging: Comprehensive logging for security and audit trails</li> <li>Health Monitoring: Real-time metrics and system health checks</li> </ul>"},{"location":"inventory-interaction-module/#commands","title":"Commands","text":"<p>The inventory module supports the following commands:</p>"},{"location":"inventory-interaction-module/#core-operations","title":"Core Operations","text":"<ul> <li><code>!inventory add &lt;item_name&gt; &lt;description&gt; [labels]</code> - Add new item to inventory</li> <li><code>!inventory checkout &lt;item_name&gt; &lt;username&gt;</code> - Check out item to user</li> <li><code>!inventory checkin &lt;item_name&gt;</code> - Check item back in</li> <li><code>!inventory delete &lt;item_name&gt;</code> - Remove item from inventory</li> </ul>"},{"location":"inventory-interaction-module/#query-operations","title":"Query Operations","text":"<ul> <li><code>!inventory list [all|available|checkedout]</code> - List items with filtering</li> <li><code>!inventory search &lt;query&gt;</code> - Search items by name, description, or labels</li> <li><code>!inventory status &lt;item_name&gt;</code> - Get item status and checkout information</li> <li><code>!inventory stats</code> - Get inventory statistics and metrics</li> </ul>"},{"location":"inventory-interaction-module/#label-management","title":"Label Management","text":"<ul> <li><code>!inventory labels &lt;item_name&gt; add &lt;label&gt;</code> - Add label to item</li> <li><code>!inventory labels &lt;item_name&gt; remove &lt;label&gt;</code> - Remove label from item</li> </ul>"},{"location":"inventory-interaction-module/#api-endpoints","title":"API Endpoints","text":""},{"location":"inventory-interaction-module/#inventory-management","title":"Inventory Management","text":"<ul> <li><code>GET /inventory</code> - List items with filtering</li> <li><code>POST /inventory</code> - Add new item</li> <li><code>GET /inventory/search</code> - Search items</li> <li><code>GET /inventory/status</code> - Get item status</li> <li><code>GET /inventory/stats</code> - Get inventory statistics</li> </ul>"},{"location":"inventory-interaction-module/#health-and-monitoring","title":"Health and Monitoring","text":"<ul> <li><code>GET /health</code> - Health check endpoint</li> <li><code>GET /metrics</code> - Performance metrics</li> </ul>"},{"location":"inventory-interaction-module/#configuration","title":"Configuration","text":""},{"location":"inventory-interaction-module/#environment-variables","title":"Environment Variables","text":"<pre><code># Database\nDATABASE_URL=postgresql://user:pass@host:5432/waddlebot\n\n# Core API Integration\nCORE_API_URL=http://router-service:8000\nROUTER_API_URL=http://router-service:8000/router\n\n# Performance Settings\nMAX_WORKERS=20\nMAX_LABELS_PER_ITEM=5\nCACHE_TTL=300\nREQUEST_TIMEOUT=30\n\n# AAA Logging Configuration\nLOG_LEVEL=INFO\nLOG_DIR=/var/log/waddlebotlog\nENABLE_SYSLOG=false\nSYSLOG_HOST=localhost\nSYSLOG_PORT=514\nSYSLOG_FACILITY=LOCAL0\n\n# Module Info\nMODULE_NAME=inventory_interaction_module\nMODULE_VERSION=1.0.0\nMODULE_PORT=8024\n</code></pre>"},{"location":"inventory-interaction-module/#database-schema","title":"Database Schema","text":""},{"location":"inventory-interaction-module/#inventory-items-table","title":"Inventory Items Table","text":"<pre><code>CREATE TABLE inventory_items (\n    id SERIAL PRIMARY KEY,\n    community_id VARCHAR(255) NOT NULL,\n    item_name VARCHAR(255) NOT NULL,\n    description TEXT,\n    labels TEXT[], -- JSON array of labels\n    is_checked_out BOOLEAN DEFAULT FALSE,\n    checked_out_to VARCHAR(255),\n    checked_out_at TIMESTAMP WITH TIME ZONE,\n    checked_in_at TIMESTAMP WITH TIME ZONE,\n    created_by VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(community_id, item_name)\n);\n</code></pre>"},{"location":"inventory-interaction-module/#inventory-activity-table","title":"Inventory Activity Table","text":"<pre><code>CREATE TABLE inventory_activity (\n    id SERIAL PRIMARY KEY,\n    community_id VARCHAR(255) NOT NULL,\n    item_id INTEGER REFERENCES inventory_items(id),\n    action VARCHAR(50) NOT NULL, -- add, checkout, checkin, delete, labels\n    performed_by VARCHAR(255) NOT NULL,\n    details JSONB, -- Additional context\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n</code></pre>"},{"location":"inventory-interaction-module/#database-indexes","title":"Database Indexes","text":"<pre><code>-- Performance indexes\nCREATE INDEX idx_inventory_community ON inventory_items(community_id);\nCREATE INDEX idx_inventory_name ON inventory_items(community_id, item_name);\nCREATE INDEX idx_inventory_checkout ON inventory_items(is_checked_out, community_id);\nCREATE INDEX idx_activity_community ON inventory_activity(community_id);\nCREATE INDEX idx_activity_item ON inventory_activity(item_id);\n</code></pre>"},{"location":"inventory-interaction-module/#logging-system","title":"Logging System","text":"<p>The module implements comprehensive AAA logging with the following structure:</p>"},{"location":"inventory-interaction-module/#log-categories","title":"Log Categories","text":"<ul> <li>AUTH: Authentication events (login, logout, token refresh)</li> <li>AUTHZ: Authorization events (permission checks, access grants/denials)</li> <li>AUDIT: User actions and system changes (CRUD operations)</li> <li>ERROR: Error conditions and exceptions</li> <li>SYSTEM: System events (startup, shutdown, health checks)</li> </ul>"},{"location":"inventory-interaction-module/#log-structure","title":"Log Structure","text":"<pre><code>[timestamp] LEVEL module:version EVENT_TYPE community=X user=Y action=Z result=STATUS [additional_fields]\n</code></pre>"},{"location":"inventory-interaction-module/#log-outputs","title":"Log Outputs","text":"<ul> <li>Console: All logs to stdout/stderr for container orchestration</li> <li>File Logging: Structured logs to <code>/var/log/waddlebotlog/</code> with rotation</li> <li>Syslog: Optional syslog support for centralized logging</li> </ul>"},{"location":"inventory-interaction-module/#performance-features","title":"Performance Features","text":""},{"location":"inventory-interaction-module/#multi-threading","title":"Multi-Threading","text":"<ul> <li>ThreadPoolExecutor with configurable worker count</li> <li>Thread-safe operations for all inventory functions</li> <li>Concurrent processing for high-volume communities</li> </ul>"},{"location":"inventory-interaction-module/#caching","title":"Caching","text":"<ul> <li>In-memory caching with TTL for frequently accessed data</li> <li>Thread-safe cache operations with locking</li> <li>Cache invalidation on data changes</li> </ul>"},{"location":"inventory-interaction-module/#connection-pooling","title":"Connection Pooling","text":"<ul> <li>Database connection pooling for optimal performance</li> <li>Separate read/write connections for complex operations</li> </ul>"},{"location":"inventory-interaction-module/#security-features","title":"Security Features","text":""},{"location":"inventory-interaction-module/#input-validation","title":"Input Validation","text":"<ul> <li>Comprehensive validation for all user inputs</li> <li>SQL injection prevention through parameterized queries</li> <li>XSS protection for web interfaces</li> </ul>"},{"location":"inventory-interaction-module/#authorization","title":"Authorization","text":"<ul> <li>Community-based access control</li> <li>User permission validation for all operations</li> <li>Decorator-based authorization checking</li> </ul>"},{"location":"inventory-interaction-module/#audit-trail","title":"Audit Trail","text":"<ul> <li>Complete audit log of all user actions</li> <li>Immutable activity tracking</li> <li>Performance metrics for security monitoring</li> </ul>"},{"location":"inventory-interaction-module/#deployment","title":"Deployment","text":""},{"location":"inventory-interaction-module/#docker","title":"Docker","text":"<pre><code>docker build -t waddlebot-inventory-interaction .\ndocker run -p 8024:8024 \\\n  -e DATABASE_URL=postgresql://user:pass@host:5432/waddlebot \\\n  -e CORE_API_URL=http://router-service:8000 \\\n  -v /var/log/waddlebotlog:/var/log/waddlebotlog \\\n  waddlebot-inventory-interaction\n</code></pre>"},{"location":"inventory-interaction-module/#kubernetes","title":"Kubernetes","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inventory-interaction\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inventory-interaction\n  template:\n    metadata:\n      labels:\n        app: inventory-interaction\n    spec:\n      containers:\n      - name: inventory-interaction\n        image: waddlebot-inventory-interaction:latest\n        ports:\n        - containerPort: 8024\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: waddlebot-secrets\n              key: database-url\n        - name: MAX_WORKERS\n          value: \"20\"\n        - name: CACHE_TTL\n          value: \"300\"\n        volumeMounts:\n        - name: log-volume\n          mountPath: /var/log/waddlebotlog\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8024\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8024\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: log-volume\n        hostPath:\n          path: /var/log/waddlebotlog\n</code></pre>"},{"location":"inventory-interaction-module/#monitoring","title":"Monitoring","text":""},{"location":"inventory-interaction-module/#health-checks","title":"Health Checks","text":"<p>The module provides comprehensive health checks:</p> <ul> <li>Database connectivity</li> <li>Cache system status</li> <li>Thread pool health</li> <li>Performance metrics</li> </ul>"},{"location":"inventory-interaction-module/#metrics","title":"Metrics","text":"<p>Available metrics include:</p> <ul> <li>Total items per community</li> <li>Checked out items count</li> <li>Available items count</li> <li>Recent activity statistics</li> <li>Performance timing data</li> <li>Error rates and types</li> </ul>"},{"location":"inventory-interaction-module/#testing","title":"Testing","text":""},{"location":"inventory-interaction-module/#unit-tests","title":"Unit Tests","text":"<pre><code># Run unit tests\npython -m pytest tests/ -v\n\n# Run with coverage\npython -m pytest tests/ --cov=app --cov-report=html\n</code></pre>"},{"location":"inventory-interaction-module/#integration-tests","title":"Integration Tests","text":"<pre><code># Run integration tests\npython -m pytest tests/test_api.py -v\n\n# Test specific functionality\npython -m pytest tests/test_inventory_service.py::TestInventoryService::test_add_item_success -v\n</code></pre>"},{"location":"inventory-interaction-module/#troubleshooting","title":"Troubleshooting","text":""},{"location":"inventory-interaction-module/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Issues</li> <li>Check DATABASE_URL environment variable</li> <li>Verify PostgreSQL server is running</li> <li> <p>Ensure database exists and user has permissions</p> </li> <li> <p>Permission Errors</p> </li> <li>Check log directory permissions (<code>/var/log/waddlebotlog</code>)</li> <li>Ensure non-root user can write to log directory</li> <li> <p>Verify community and user context in requests</p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor thread pool utilization</li> <li>Check cache hit rates</li> <li>Review database query performance</li> <li>Increase MAX_WORKERS if needed</li> </ol>"},{"location":"inventory-interaction-module/#log-analysis","title":"Log Analysis","text":"<pre><code># View inventory-specific logs\ntail -f /var/log/waddlebotlog/inventory_interaction_module.log\n\n# View audit logs\ntail -f /var/log/waddlebotlog/inventory_interaction_module_audit.log\n\n# Search for specific errors\ngrep \"ERROR\" /var/log/waddlebotlog/inventory_interaction_module_error.log\n</code></pre>"},{"location":"inventory-interaction-module/#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md for guidelines on contributing to the inventory interaction module.</p>"},{"location":"inventory-interaction-module/#license","title":"License","text":"<p>This module is part of the WaddleBot project and is licensed under the same terms as the main project.</p>"},{"location":"logging-and-monitoring/","title":"WaddleBot Logging and Monitoring Documentation","text":""},{"location":"logging-and-monitoring/#overview","title":"Overview","text":"<p>WaddleBot implements comprehensive Authentication, Authorization, and Auditing (AAA) logging across all container modules to ensure security, compliance, and operational visibility. This document outlines the logging standards, implementation requirements, and monitoring strategies.</p>"},{"location":"logging-and-monitoring/#logging-requirements","title":"Logging Requirements","text":""},{"location":"logging-and-monitoring/#universal-implementation","title":"Universal Implementation","text":"<p>ALL WaddleBot container modules MUST implement comprehensive AAA logging.</p>"},{"location":"logging-and-monitoring/#required-logging-outputs","title":"Required Logging Outputs","text":"<ol> <li>Console Logging</li> <li>All logs output to stdout/stderr for container orchestration</li> <li>Compatible with Docker, Kubernetes, and other container platforms</li> <li> <p>Structured format for log aggregation tools</p> </li> <li> <p>File Logging</p> </li> <li>Structured logs to <code>/var/log/waddlebotlog/</code> directory</li> <li>Automatic rotation (10MB files, 5 backups)</li> <li> <p>Separate log files by category (auth, authz, audit, error, system)</p> </li> <li> <p>Syslog (Optional)</p> </li> <li>Configurable syslog support for centralized logging</li> <li>RFC 3164 compliant syslog messages</li> <li>Configurable facility and severity levels</li> </ol>"},{"location":"logging-and-monitoring/#log-categories","title":"Log Categories","text":""},{"location":"logging-and-monitoring/#auth-authentication","title":"AUTH (Authentication)","text":"<p>Events related to user authentication and session management.</p> <p>Examples: - User login attempts (success/failure) - Token generation and refresh - Authentication method changes - Session creation and expiration - OAuth flows and callback processing</p>"},{"location":"logging-and-monitoring/#authz-authorization","title":"AUTHZ (Authorization)","text":"<p>Events related to permission checks and access control.</p> <p>Examples: - Permission checks (granted/denied) - Role assignments and modifications - ACL rule evaluations - Resource access attempts - Administrative privilege usage</p>"},{"location":"logging-and-monitoring/#audit-user-actions","title":"AUDIT (User Actions)","text":"<p>Events related to user actions and system changes.</p> <p>Examples: - CRUD operations (create, read, update, delete) - Configuration changes - Module installations/removals - Data exports and imports - Administrative actions</p>"},{"location":"logging-and-monitoring/#error-error-conditions","title":"ERROR (Error Conditions)","text":"<p>Events related to system errors and exceptions.</p> <p>Examples: - Application exceptions - Database connection failures - External API errors - Resource exhaustion - Validation failures</p>"},{"location":"logging-and-monitoring/#system-system-events","title":"SYSTEM (System Events)","text":"<p>Events related to system operations and health.</p> <p>Examples: - Service startup and shutdown - Health check results - Performance metrics - Resource utilization - Maintenance operations</p>"},{"location":"logging-and-monitoring/#log-structure","title":"Log Structure","text":""},{"location":"logging-and-monitoring/#standard-format","title":"Standard Format","text":"<pre><code>[timestamp] LEVEL module:version EVENT_TYPE community=X user=Y action=Z result=STATUS [additional_fields]\n</code></pre>"},{"location":"logging-and-monitoring/#field-specifications","title":"Field Specifications","text":"<ul> <li>timestamp: ISO 8601 format with timezone (e.g., <code>2024-01-15T14:30:00.123Z</code>)</li> <li>LEVEL: Log level (DEBUG, INFO, WARNING, ERROR)</li> <li>module: Module name (e.g., <code>inventory_interaction_module</code>)</li> <li>version: Module version (e.g., <code>1.0.0</code>)</li> <li>EVENT_TYPE: Log category (AUTH, AUTHZ, AUDIT, ERROR, SYSTEM)</li> <li>community: Community identifier (when applicable)</li> <li>user: User identifier (when applicable)</li> <li>action: Action being performed</li> <li>result: Operation result (SUCCESS, FAILURE, DENIED, ERROR)</li> <li>additional_fields: Context-specific fields</li> </ul>"},{"location":"logging-and-monitoring/#example-log-entries","title":"Example Log Entries","text":"<pre><code>[2024-01-15T14:30:00.123Z] INFO inventory_interaction_module:1.0.0 AUTH community=gaming_server user=user123 action=token_refresh result=SUCCESS ip=192.168.1.100 session=sess_abc123\n\n[2024-01-15T14:30:05.456Z] INFO inventory_interaction_module:1.0.0 AUTHZ community=gaming_server user=user123 action=add_item resource=inventory result=GRANTED permissions=inventory_admin\n\n[2024-01-15T14:30:10.789Z] INFO inventory_interaction_module:1.0.0 AUDIT community=gaming_server user=user123 action=add_item resource=inventory result=SUCCESS duration=150ms item_name=laptop description=\"Gaming laptop\"\n\n[2024-01-15T14:30:15.012Z] ERROR inventory_interaction_module:1.0.0 ERROR community=gaming_server user=user456 action=checkout_item error=\"Item not found\" item_name=nonexistent\n</code></pre>"},{"location":"logging-and-monitoring/#configuration","title":"Configuration","text":""},{"location":"logging-and-monitoring/#environment-variables","title":"Environment Variables","text":"<p>All modules must support these logging configuration variables:</p> <pre><code># Log Level Configuration\nLOG_LEVEL=INFO                    # DEBUG, INFO, WARNING, ERROR\n\n# File Logging Configuration\nLOG_DIR=/var/log/waddlebotlog    # Log directory path\n\n# Syslog Configuration (Optional)\nENABLE_SYSLOG=false              # Enable syslog output\nSYSLOG_HOST=localhost            # Syslog server host\nSYSLOG_PORT=514                  # Syslog server port (514 for UDP, 6514 for TCP)\nSYSLOG_FACILITY=LOCAL0           # Syslog facility (LOCAL0-LOCAL7)\nSYSLOG_PROTOCOL=UDP              # UDP or TCP\n</code></pre>"},{"location":"logging-and-monitoring/#log-rotation-configuration","title":"Log Rotation Configuration","text":"<pre><code># Rotation Settings\nLOG_MAX_SIZE=10485760            # 10MB in bytes\nLOG_BACKUP_COUNT=5               # Number of backup files\nLOG_ROTATION_WHEN=midnight       # Daily rotation\n</code></pre>"},{"location":"logging-and-monitoring/#implementation-guide","title":"Implementation Guide","text":""},{"location":"logging-and-monitoring/#python-implementation","title":"Python Implementation","text":"<pre><code>import logging\nimport logging.handlers\nfrom datetime import datetime, timezone\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\n\n@dataclass\nclass LogEvent:\n    \"\"\"Structured log event for WaddleBot\"\"\"\n    timestamp: str\n    level: str\n    module: str\n    version: str\n    event_type: str  # AUTH, AUTHZ, AUDIT, SYSTEM, ERROR\n    community_id: Optional[str] = None\n    user_id: Optional[str] = None\n    session_id: Optional[str] = None\n    action: Optional[str] = None\n    resource: Optional[str] = None\n    result: Optional[str] = None  # SUCCESS, FAILURE, DENIED\n    details: Optional[Dict[str, Any]] = None\n    ip_address: Optional[str] = None\n    user_agent: Optional[str] = None\n    duration_ms: Optional[int] = None\n    error_message: Optional[str] = None\n\nclass WaddleBotLogger:\n    \"\"\"Comprehensive logging system for WaddleBot modules\"\"\"\n\n    def __init__(self, module_name: str, module_version: str):\n        self.module_name = module_name\n        self.module_version = module_version\n        self.setup_logging()\n\n    def setup_logging(self):\n        \"\"\"Setup logging configuration\"\"\"\n        # Configure loggers, handlers, and formatters\n        # Implementation details...\n\n    def log_authentication(self, user_id: str, action: str, result: str, **kwargs):\n        \"\"\"Log authentication events\"\"\"\n        # Implementation details...\n\n    def log_authorization(self, community_id: str, user_id: str, action: str, \n                         resource: str, result: str, **kwargs):\n        \"\"\"Log authorization events\"\"\"\n        # Implementation details...\n\n    def log_audit(self, community_id: str, user_id: str, action: str, \n                  resource: str, result: str, **kwargs):\n        \"\"\"Log audit events\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"logging-and-monitoring/#decorator-patterns","title":"Decorator Patterns","text":"<pre><code>def audit_log(action: str, resource_type: str = \"default\"):\n    \"\"\"Decorator for automatic audit logging\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            start_time = datetime.now()\n            try:\n                result = func(*args, **kwargs)\n                duration = (datetime.now() - start_time).total_seconds() * 1000\n                # Log successful operation\n                return result\n            except Exception as e:\n                duration = (datetime.now() - start_time).total_seconds() * 1000\n                # Log failed operation\n                raise\n        return wrapper\n    return decorator\n\ndef require_permission(required_permission: str):\n    \"\"\"Decorator for authorization checking with logging\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            # Check permissions and log result\n            # Implementation details...\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"logging-and-monitoring/#log-file-organization","title":"Log File Organization","text":""},{"location":"logging-and-monitoring/#directory-structure","title":"Directory Structure","text":"<pre><code>/var/log/waddlebotlog/\n\u251c\u2500\u2500 {module_name}/\n\u2502   \u251c\u2500\u2500 {module_name}.log              # Main application log\n\u2502   \u251c\u2500\u2500 {module_name}_auth.log         # Authentication events\n\u2502   \u251c\u2500\u2500 {module_name}_authz.log        # Authorization events\n\u2502   \u251c\u2500\u2500 {module_name}_audit.log        # Audit trail\n\u2502   \u251c\u2500\u2500 {module_name}_error.log        # Error events\n\u2502   \u2514\u2500\u2500 {module_name}_system.log       # System events\n</code></pre>"},{"location":"logging-and-monitoring/#file-naming-convention","title":"File Naming Convention","text":"<ul> <li>Main log: <code>{module_name}.log</code></li> <li>Category logs: <code>{module_name}_{category}.log</code></li> <li>Rotated files: <code>{module_name}.log.1</code>, <code>{module_name}.log.2</code>, etc.</li> </ul>"},{"location":"logging-and-monitoring/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"logging-and-monitoring/#log-aggregation","title":"Log Aggregation","text":""},{"location":"logging-and-monitoring/#elk-stack-integration","title":"ELK Stack Integration","text":"<pre><code># Filebeat configuration for WaddleBot logs\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - /var/log/waddlebotlog/*/*.log\n  fields:\n    service: waddlebot\n  fields_under_root: true\n  multiline.pattern: '^\\['\n  multiline.negate: true\n  multiline.match: after\n\nprocessors:\n- add_docker_metadata:\n    host: \"unix:///var/run/docker.sock\"\n</code></pre>"},{"location":"logging-and-monitoring/#fluentd-configuration","title":"Fluentd Configuration","text":"<pre><code>&lt;source&gt;\n  @type tail\n  path /var/log/waddlebotlog/*/*.log\n  pos_file /var/log/td-agent/waddlebot.log.pos\n  tag waddlebot.*\n  format json\n  time_format %Y-%m-%dT%H:%M:%S.%L%z\n&lt;/source&gt;\n\n&lt;match waddlebot.**&gt;\n  @type elasticsearch\n  host elasticsearch\n  port 9200\n  index_name waddlebot-logs\n&lt;/match&gt;\n</code></pre>"},{"location":"logging-and-monitoring/#alerting-rules","title":"Alerting Rules","text":""},{"location":"logging-and-monitoring/#critical-events","title":"Critical Events","text":"<ol> <li>Authentication Failures</li> <li>More than 5 failed login attempts per user in 1 minute</li> <li>Invalid token usage patterns</li> <li> <p>Suspicious authentication patterns</p> </li> <li> <p>Authorization Violations</p> </li> <li>Repeated permission denied events</li> <li>Privilege escalation attempts</li> <li> <p>Unusual access patterns</p> </li> <li> <p>System Errors</p> </li> <li>Database connection failures</li> <li>Service unavailability</li> <li>Performance degradation</li> </ol>"},{"location":"logging-and-monitoring/#alert-configuration-prometheusalertmanager","title":"Alert Configuration (Prometheus/AlertManager)","text":"<pre><code>groups:\n- name: waddlebot-security\n  rules:\n  - alert: HighAuthenticationFailures\n    expr: rate(waddlebot_auth_failures_total[1m]) &gt; 5\n    for: 1m\n    labels:\n      severity: warning\n    annotations:\n      summary: High authentication failure rate\n      description: \"{{ $labels.module }} has {{ $value }} auth failures/sec\"\n\n  - alert: DatabaseConnectionFailure\n    expr: waddlebot_db_connection_failures_total &gt; 0\n    for: 0m\n    labels:\n      severity: critical\n    annotations:\n      summary: Database connection failure\n      description: \"{{ $labels.module }} cannot connect to database\"\n</code></pre>"},{"location":"logging-and-monitoring/#compliance-and-retention","title":"Compliance and Retention","text":""},{"location":"logging-and-monitoring/#data-retention-policies","title":"Data Retention Policies","text":"<ol> <li>Security Logs (AUTH/AUTHZ)</li> <li>Retention: 2 years minimum</li> <li>Immutable storage recommended</li> <li> <p>Regular backup and archival</p> </li> <li> <p>Audit Logs</p> </li> <li>Retention: 7 years (compliance requirement)</li> <li>Encrypted storage required</li> <li> <p>Access logging for log access</p> </li> <li> <p>System Logs</p> </li> <li>Retention: 90 days</li> <li>Rolling deletion acceptable</li> <li> <p>Performance optimization focus</p> </li> <li> <p>Error Logs</p> </li> <li>Retention: 1 year</li> <li>Compressed storage acceptable</li> <li>Debugging and troubleshooting focus</li> </ol>"},{"location":"logging-and-monitoring/#compliance-standards","title":"Compliance Standards","text":"<ul> <li>SOC 2 Type II: Comprehensive audit trails</li> <li>GDPR: Personal data handling logs</li> <li>HIPAA: Healthcare data access logs (if applicable)</li> <li>PCI DSS: Payment card data access logs (if applicable)</li> </ul>"},{"location":"logging-and-monitoring/#performance-considerations","title":"Performance Considerations","text":""},{"location":"logging-and-monitoring/#logging-overhead","title":"Logging Overhead","text":"<ol> <li>Asynchronous Logging</li> <li>Use background threads for log writing</li> <li>Queue-based log processing</li> <li> <p>Non-blocking application logic</p> </li> <li> <p>Log Level Optimization</p> </li> <li>Production: INFO level minimum</li> <li>Development: DEBUG level acceptable</li> <li> <p>Dynamic log level adjustment</p> </li> <li> <p>Structured Logging</p> </li> <li>JSON format for machine parsing</li> <li>Consistent field naming</li> <li>Efficient serialization</li> </ol>"},{"location":"logging-and-monitoring/#storage-optimization","title":"Storage Optimization","text":"<ol> <li>Compression</li> <li>Gzip compression for rotated logs</li> <li>Archive older logs to cold storage</li> <li> <p>Use efficient storage formats</p> </li> <li> <p>Indexing</p> </li> <li>Index critical fields for search</li> <li>Partition logs by time and module</li> <li>Optimize query performance</li> </ol>"},{"location":"logging-and-monitoring/#security-considerations","title":"Security Considerations","text":""},{"location":"logging-and-monitoring/#log-security","title":"Log Security","text":"<ol> <li>Access Control</li> <li>Restrict log file access to authorized users</li> <li>Separate log access from application access</li> <li> <p>Audit log access activities</p> </li> <li> <p>Data Protection</p> </li> <li>Encrypt logs in transit and at rest</li> <li>Redact sensitive information</li> <li> <p>Use secure log transmission protocols</p> </li> <li> <p>Integrity Protection</p> </li> <li>Implement log signing for critical events</li> <li>Use immutable storage for security logs</li> <li>Regular integrity verification</li> </ol>"},{"location":"logging-and-monitoring/#sensitive-data-handling","title":"Sensitive Data Handling","text":""},{"location":"logging-and-monitoring/#data-to-redact","title":"Data to Redact","text":"<ul> <li>User passwords and tokens</li> <li>API keys and secrets</li> <li>Personal identifiable information (PII)</li> <li>Financial information</li> <li>Private communication content</li> </ul>"},{"location":"logging-and-monitoring/#redaction-examples","title":"Redaction Examples","text":"<pre><code>def redact_sensitive_data(log_data: dict) -&gt; dict:\n    \"\"\"Redact sensitive information from log data\"\"\"\n    sensitive_fields = ['password', 'token', 'api_key', 'secret']\n\n    for field in sensitive_fields:\n        if field in log_data:\n            log_data[field] = '[REDACTED]'\n\n    # Redact credit card numbers\n    if 'card_number' in log_data:\n        log_data['card_number'] = log_data['card_number'][:4] + '****'\n\n    return log_data\n</code></pre>"},{"location":"logging-and-monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"logging-and-monitoring/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Log Directory Permissions <pre><code># Fix log directory permissions\nsudo mkdir -p /var/log/waddlebotlog\nsudo chown -R waddlebot:waddlebot /var/log/waddlebotlog\nsudo chmod 755 /var/log/waddlebotlog\n</code></pre></p> </li> <li> <p>Log Rotation Issues <pre><code># Check logrotate configuration\ncat /etc/logrotate.d/waddlebot\n\n# Test logrotate\nsudo logrotate -d /etc/logrotate.d/waddlebot\n</code></pre></p> </li> <li> <p>Disk Space Issues <pre><code># Monitor log disk usage\ndu -sh /var/log/waddlebotlog/*\n\n# Clean old logs\nfind /var/log/waddlebotlog -name \"*.log.*\" -mtime +30 -delete\n</code></pre></p> </li> </ol>"},{"location":"logging-and-monitoring/#log-analysis-tools","title":"Log Analysis Tools","text":"<pre><code># View recent authentication events\ngrep \"AUTH\" /var/log/waddlebotlog/*/auth.log | tail -100\n\n# Count authorization denials\ngrep \"DENIED\" /var/log/waddlebotlog/*/authz.log | wc -l\n\n# Find errors in the last hour\nfind /var/log/waddlebotlog -name \"*error.log\" -exec grep \"$(date -d '1 hour ago' '+%Y-%m-%d %H')\" {} \\;\n\n# Monitor real-time logs\ntail -f /var/log/waddlebotlog/*/*.log | grep ERROR\n</code></pre>"},{"location":"logging-and-monitoring/#best-practices","title":"Best Practices","text":""},{"location":"logging-and-monitoring/#development","title":"Development","text":"<ol> <li>Consistent Logging</li> <li>Use the same log format across all modules</li> <li>Implement logging early in development</li> <li> <p>Test logging functionality regularly</p> </li> <li> <p>Context Preservation</p> </li> <li>Include request/session IDs in all related logs</li> <li>Maintain user context throughout operation chains</li> <li> <p>Log both successful and failed operations</p> </li> <li> <p>Performance Testing</p> </li> <li>Test logging performance under load</li> <li>Monitor logging overhead in production</li> <li>Optimize logging configuration for performance</li> </ol>"},{"location":"logging-and-monitoring/#operations","title":"Operations","text":"<ol> <li>Log Monitoring</li> <li>Set up automated monitoring and alerting</li> <li>Regular log review and analysis</li> <li> <p>Proactive issue identification</p> </li> <li> <p>Incident Response</p> </li> <li>Use logs for incident investigation</li> <li>Maintain log availability during incidents</li> <li> <p>Document log analysis procedures</p> </li> <li> <p>Capacity Planning</p> </li> <li>Monitor log volume growth</li> <li>Plan for storage expansion</li> <li>Optimize retention policies</li> </ol>"},{"location":"logging-and-monitoring/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"logging-and-monitoring/#module-implementation","title":"Module Implementation","text":"<ul> <li> Implement WaddleBotLogger class</li> <li> Configure all five log categories (AUTH, AUTHZ, AUDIT, ERROR, SYSTEM)</li> <li> Set up file rotation and retention</li> <li> Implement decorator patterns for automatic logging</li> <li> Add syslog support (optional)</li> <li> Create comprehensive unit tests for logging</li> <li> Document module-specific logging patterns</li> <li> Implement log redaction for sensitive data</li> <li> Set up health check logging</li> <li> Configure performance metrics logging</li> </ul>"},{"location":"logging-and-monitoring/#deployment","title":"Deployment","text":"<ul> <li> Create log directory with correct permissions</li> <li> Configure environment variables</li> <li> Set up log aggregation (ELK/Fluentd)</li> <li> Configure monitoring and alerting</li> <li> Implement log backup and archival</li> <li> Set up log access controls</li> <li> Create operational runbooks</li> <li> Train operations team on log analysis</li> <li> Establish incident response procedures</li> <li> Schedule regular log review processes</li> </ul> <p>This comprehensive logging and monitoring system ensures WaddleBot maintains the highest standards of security, compliance, and operational visibility across all modules.</p>"},{"location":"architecture/","title":"System Architecture","text":"<p>WaddleBot is built with a modern microservices architecture designed for scalability, maintainability, and extensibility. This section provides an overview of the system's design principles and core components.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":""},{"location":"architecture/#microservices-architecture","title":"\ud83c\udfd7\ufe0f Microservices Architecture","text":"<p>Each component runs as an independent service with well-defined APIs:</p> <ul> <li>Collector Modules: Platform-specific message and event collection</li> <li>Core Services: Central business logic and data management</li> <li>Interaction Modules: Functional modules for specific features</li> <li>Administration Tools: Management and monitoring interfaces</li> </ul>"},{"location":"architecture/#event-driven-communication","title":"\ud83d\udd04 Event-Driven Communication","text":"<p>Components communicate through:</p> <ul> <li>REST APIs: Kong API Gateway with unified routing</li> <li>Message Events: Platform events processed through router</li> <li>WebSocket: Real-time updates for browser sources</li> <li>Database: Shared state via PostgreSQL with read replicas</li> </ul>"},{"location":"architecture/#horizontal-scalability","title":"\ud83d\udcc8 Horizontal Scalability","text":"<p>Built for scale from day one:</p> <ul> <li>Container-based: Docker containers with Kubernetes orchestration</li> <li>Database Scaling: PostgreSQL with read replicas and connection pooling</li> <li>Caching Layer: Redis for session management and performance</li> <li>Load Balancing: Kong API Gateway with rate limiting</li> </ul>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TB\n    subgraph \"External Platforms\"\n        P1[Discord]\n        P2[Twitch]\n        P3[Slack]\n    end\n\n    subgraph \"Collector Layer\"\n        C1[Discord Module]\n        C2[Twitch Module]\n        C3[Slack Module]\n    end\n\n    subgraph \"API Gateway\"\n        K[Kong Gateway]\n    end\n\n    subgraph \"Core Layer\"\n        R[Router Module]\n        M[Marketplace]\n        I[Identity Core]\n        L[Labels Core]\n        P[Portal Module]\n    end\n\n    subgraph \"Interaction Layer\"\n        AI[AI Interaction]\n        AL[Alias System]\n        SH[Shoutouts]\n        IN[Inventory]\n        CA[Calendar]\n        ME[Memories]\n        YT[YouTube Music]\n        SP[Spotify]\n    end\n\n    subgraph \"Integration Layer\"\n        BS[Browser Sources]\n        WS[WebSocket Service]\n    end\n\n    subgraph \"Data Layer\"\n        PG[(PostgreSQL)]\n        RD[(Redis)]\n        S3[(S3 Storage)]\n    end\n\n    subgraph \"External Services\"\n        OBS[OBS Studio]\n        AWS[AWS Lambda]\n        OW[OpenWhisk]\n    end\n\n    P1 --&gt; C1\n    P2 --&gt; C2\n    P3 --&gt; C3\n\n    C1 --&gt; K\n    C2 --&gt; K\n    C3 --&gt; K\n\n    K --&gt; R\n    K --&gt; M\n    K --&gt; I\n    K --&gt; L\n    K --&gt; P\n\n    R --&gt; AI\n    R --&gt; AL\n    R --&gt; SH\n    R --&gt; IN\n    R --&gt; CA\n    R --&gt; ME\n    R --&gt; YT\n    R --&gt; SP\n\n    AI --&gt; BS\n    YT --&gt; BS\n    SP --&gt; BS\n\n    BS --&gt; WS\n    WS --&gt; OBS\n\n    R --&gt; PG\n    R --&gt; RD\n    I --&gt; PG\n    I --&gt; RD\n    L --&gt; PG\n    L --&gt; RD\n\n    R --&gt; AWS\n    R --&gt; OW</code></pre>"},{"location":"architecture/#component-categories","title":"Component Categories","text":""},{"location":"architecture/#core-components-required","title":"\ud83c\udfaf Core Components (Required)","text":"<p>Essential services that must run for basic functionality:</p> Component Purpose Port Dependencies Router Module Command routing and processing 8000 PostgreSQL, Redis Marketplace Module management 8001 PostgreSQL Identity Core User identity and authentication 8050 PostgreSQL, Redis, py4web Auth Portal Module Web-based administration 8000 PostgreSQL, Identity Core"},{"location":"architecture/#collector-modules-platform-specific","title":"\ud83d\udce1 Collector Modules (Platform-specific)","text":"<p>One collector per platform integration:</p> Platform Module Port Features Discord discord_module 8003 py-cord, slash commands, events Twitch twitch_module 8002 EventSub webhooks, Helix API Slack slack_module 8004 Events API, slash commands"},{"location":"architecture/#interaction-modules-optional","title":"\u2699\ufe0f Interaction Modules (Optional)","text":"<p>Feature-specific modules that can be enabled per community:</p> Module Purpose Dependencies AI Interaction Chat responses with AI providers Ollama/OpenAI/MCP Alias System Linux-style command aliases Router Shoutouts User shoutouts with clips Twitch API Inventory Item tracking and management Labels Core Calendar Event management with approval Labels Core Memories Quote/URL/reminder system Labels Core YouTube Music Music search and playback YouTube API Spotify Music control and display Spotify API"},{"location":"architecture/#supporting-services","title":"\ud83c\udfa8 Supporting Services","text":"<p>Additional services for advanced features:</p> Service Purpose Used By Browser Sources OBS overlay integration Music modules, general responses Labels Core Community/user labeling Inventory, Calendar, Memories Kong Admin Broker Kong user management Portal, Administration"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#message-processing-flow","title":"Message Processing Flow","text":"<ol> <li>Message Reception: Platform sends webhook/event to collector</li> <li>Event Classification: Determine message type (chat, subscription, etc.)</li> <li>Router Forwarding: Send to router with entity context</li> <li>Session Creation: Router generates session_id and caches entity mapping</li> <li>Command Processing: </li> <li>Parse command prefix (<code>!</code> for containers, <code>#</code> for serverless)</li> <li>Check permissions and rate limits</li> <li>Route to appropriate execution engine</li> <li>Module Execution: Execute interaction modules sequentially or in parallel</li> <li>Response Processing: Collect responses and route to appropriate channels</li> <li>Browser Source Updates: Send media/ticker data to OBS integration</li> </ol>"},{"location":"architecture/#identity-verification-flow","title":"Identity Verification Flow","text":"<ol> <li>Link Request: User types <code>!identity link platform username</code></li> <li>Verification Code: System generates time-limited code</li> <li>Platform Delivery: Code sent via whisper/DM through collector</li> <li>Code Verification: User submits code via <code>!verify CODE</code></li> <li>Identity Linking: Confirmed link stored in identity database</li> <li>API Key Generation: Optional user API keys for programmatic access</li> </ol>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/#backend-framework","title":"Backend Framework","text":"<ul> <li>py4web: Modern Python web framework for all modules</li> <li>PostgreSQL: Primary database with read replica support</li> <li>Redis: Caching and session management</li> <li>Kong: API Gateway for unified routing and authentication</li> </ul>"},{"location":"architecture/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Docker: Containerization for all services</li> <li>Kubernetes: Container orchestration and scaling</li> <li>Horizontal Pod Autoscaling: Automatic scaling based on load</li> </ul>"},{"location":"architecture/#external-integrations","title":"External Integrations","text":"<ul> <li>AWS Lambda: Serverless execution for community modules</li> <li>Apache OpenWhisk: Open source serverless alternative</li> <li>Platform APIs: Native integration with Discord, Twitch, Slack APIs</li> </ul>"},{"location":"architecture/#development-tools","title":"Development Tools","text":"<ul> <li>Python 3.12: Modern Python with type hints</li> <li>ThreadPoolExecutor: Concurrent processing</li> <li>WebSocket: Real-time communication</li> <li>OAuth 2.0: Secure platform authentication</li> </ul>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Kong API Keys: Per-service authentication</li> <li>py4web Auth: User session management</li> <li>OAuth Integration: Platform-specific authentication</li> <li>RBAC: Role-based access control per community</li> </ul>"},{"location":"architecture/#data-protection","title":"Data Protection","text":"<ul> <li>Webhook Signature Verification: HMAC-SHA256 for platform webhooks</li> <li>Token Encryption: Secure storage of OAuth tokens</li> <li>Rate Limiting: Per-user, per-command, per-entity limits</li> <li>Session Management: Redis-based session storage with TTL</li> </ul>"},{"location":"architecture/#network-security","title":"Network Security","text":"<ul> <li>TLS Termination: HTTPS/TLS at ingress level</li> <li>Non-root Containers: Security-hardened container images</li> <li>Read-only Filesystems: Immutable container filesystems</li> <li>Network Policies: Kubernetes network segmentation</li> </ul>"},{"location":"architecture/#scalability-features","title":"Scalability Features","text":""},{"location":"architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Coordination System: Dynamic assignment of servers/channels to containers</li> <li>Load Distribution: Automatic workload balancing across instances</li> <li>Auto-scaling: Kubernetes HPA based on CPU/memory usage</li> </ul>"},{"location":"architecture/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Multi-threading: ThreadPoolExecutor for concurrent operations</li> <li>Database Optimization: Read replicas and connection pooling</li> <li>Caching Strategy: Multi-level caching with Redis and in-memory caches</li> <li>Batch Processing: Process up to 100 events concurrently</li> </ul>"},{"location":"architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Health Checks: Comprehensive health monitoring for all services</li> <li>Metrics Collection: Performance metrics and usage statistics</li> <li>Logging: Structured AAA (Authentication, Authorization, Auditing) logs</li> <li>Alerting: Proactive monitoring with automated alerting</li> </ul>"},{"location":"core-modules/","title":"Core Modules Overview","text":"<p>Core modules are the foundation of WaddleBot's architecture. These modules must be running for the system to function properly and provide the essential services that all other components depend on.</p>"},{"location":"core-modules/#module-categories","title":"Module Categories","text":""},{"location":"core-modules/#required-core-modules","title":"\ud83c\udfaf Required Core Modules","text":"<p>These modules are essential and must always be running:</p> Module Purpose Dependencies Port Router Module Command routing and processing PostgreSQL, Redis 8000 Marketplace Module management and distribution PostgreSQL, Router 8001 Identity Core Cross-platform user identity PostgreSQL, Redis, py4web Auth 8050"},{"location":"core-modules/#supporting-core-modules","title":"\u2699\ufe0f Supporting Core Modules","text":"<p>These provide additional core functionality:</p> Module Purpose Dependencies Port Labels Core Community and user labeling PostgreSQL, Redis 8025 Portal Module Web administration interface PostgreSQL, Identity Core 8000 Browser Sources OBS integration and overlays WebSocket, Router 8027"},{"location":"core-modules/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"External Requests\"\n        P[Platform Collectors]\n        W[Web Portal Users]\n        A[Admin Requests]\n    end\n\n    subgraph \"Core Services\"\n        R[Router Module&lt;br/&gt;:8000]\n        M[Marketplace&lt;br/&gt;:8001] \n        I[Identity Core&lt;br/&gt;:8050]\n        L[Labels Core&lt;br/&gt;:8025]\n        PT[Portal&lt;br/&gt;:8000]\n        BS[Browser Sources&lt;br/&gt;:8027]\n    end\n\n    subgraph \"Data Layer\"\n        PG[(PostgreSQL)]\n        RD[(Redis)]\n    end\n\n    subgraph \"External Integration\"\n        OBS[OBS Studio]\n        WS[WebSocket Clients]\n    end\n\n    P --&gt; R\n    W --&gt; PT\n    A --&gt; PT\n\n    R --&gt; M\n    R --&gt; I\n    R --&gt; L\n    R --&gt; BS\n\n    PT --&gt; I\n    PT --&gt; BS\n\n    R --&gt; PG\n    R --&gt; RD\n    I --&gt; PG\n    I --&gt; RD\n    L --&gt; PG\n    L --&gt; RD\n\n    BS --&gt; WS\n    WS --&gt; OBS</code></pre>"},{"location":"core-modules/#core-module-responsibilities","title":"Core Module Responsibilities","text":""},{"location":"core-modules/#router-module-traffic-control-center","title":"\ud83d\udea6 Router Module - Traffic Control Center","text":"<p>The heart of the WaddleBot system that handles all message routing and command processing.</p> <p>Key Features: - High-performance multi-threaded command processing - Rate limiting with sliding window algorithm - Session management with Redis - Database optimization with read replicas - String matching for content moderation - Execution engine routing (containers, Lambda, OpenWhisk)</p> <p>Performance: - Processes up to 100 concurrent events - Sub-millisecond command lookups with caching - Horizontal scaling with coordination system</p>"},{"location":"core-modules/#marketplace-module-module-distribution-hub","title":"\ud83c\udfea Marketplace Module - Module Distribution Hub","text":"<p>Manages the discovery, installation, and lifecycle of community modules.</p> <p>Key Features: - Module browsing and search functionality - Version control with upgrade/downgrade support - Entity-based permission system - Usage analytics and performance tracking - Automatic router integration for command registration - Subscription management for paid modules</p> <p>Integration: - Syncs commands with Router Module - Provides API for Portal Module - Manages module permissions per community</p>"},{"location":"core-modules/#identity-core-module-user-identity-management","title":"\ud83d\udd10 Identity Core Module - User Identity Management","text":"<p>Provides cross-platform identity linking and authentication services.</p> <p>Key Features: - py4web Auth foundation with extended user fields - Cross-platform identity verification via whispers/DMs - User API key management for programmatic access - Multi-threaded processing with Redis caching - Time-limited verification codes with security measures - Comprehensive AAA (Authentication, Authorization, Auditing) logging</p> <p>Security Features: - SHA-256 hashed API keys - Rate limiting to prevent abuse - Platform integration for secure code delivery - Session management with configurable expiration</p>"},{"location":"core-modules/#labels-core-module-community-organization","title":"\ud83c\udff7\ufe0f Labels Core Module - Community Organization","text":"<p>High-performance labeling system for organizing communities, users, and content.</p> <p>Key Features: - Multi-threaded architecture with ThreadPoolExecutor - Bulk operations supporting up to 1000 items per batch - Redis caching with fallback to local cache - Label management for communities, modules, users, and entity groups - Search functionality with performance optimization - Background processing for long-running operations</p> <p>Performance: - Handles thousands of requests per second - Concurrent user verification and entity group management - Real-time metrics and health monitoring</p>"},{"location":"core-modules/#portal-module-web-administration","title":"\ud83c\udf10 Portal Module - Web Administration","text":"<p>Provides web-based administration interface for community managers.</p> <p>Key Features: - py4web-based web interface with modern design - Community member management with roles and reputation - Module installation and configuration management - Browser source URL management for OBS integration - Email integration for user notifications - Dashboard with community statistics and metrics</p> <p>Integration: - Uses Identity Core for authentication - Integrates with Browser Sources for OBS URLs - Connects to Router for community data</p>"},{"location":"core-modules/#browser-sources-module-obs-integration","title":"\ud83c\udfa8 Browser Sources Module - OBS Integration","text":"<p>Enables real-time browser source overlays for streaming and content creation.</p> <p>Key Features: - Multi-threaded WebSocket communication - Three source types: ticker, media, and general displays - Unique token-based URLs per community - Real-time updates with automatic reconnection - OBS-optimized templates with transparent backgrounds - Queue management for ticker messages</p> <p>Source Types: - Ticker: Scrolling text notifications and alerts - Media: Music display with album art and progress bars - General: Flexible HTML content for forms and announcements</p>"},{"location":"core-modules/#module-communication","title":"Module Communication","text":""},{"location":"core-modules/#api-communication","title":"API Communication","text":"<p>All core modules communicate via REST APIs through Kong Gateway:</p> <pre><code>Kong Gateway (:8000) \n\u251c\u2500\u2500 /router/*     \u2192 Router Module (:8000)\n\u251c\u2500\u2500 /marketplace/* \u2192 Marketplace (:8001) \n\u251c\u2500\u2500 /identity/*   \u2192 Identity Core (:8050)\n\u251c\u2500\u2500 /labels/*     \u2192 Labels Core (:8025)\n\u251c\u2500\u2500 /browser/*    \u2192 Browser Sources (:8027)\n\u2514\u2500\u2500 /portal/*     \u2192 Portal Module (:8000)\n</code></pre>"},{"location":"core-modules/#data-sharing","title":"Data Sharing","text":"<p>Core modules share data through:</p> <ul> <li>PostgreSQL: Persistent data storage with read replicas</li> <li>Redis: Session management, caching, and real-time data</li> <li>Event System: Router forwards events to appropriate modules</li> <li>WebSocket: Real-time updates for browser sources</li> </ul>"},{"location":"core-modules/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>User Authentication: Portal uses Identity Core for login</li> <li>API Authentication: Kong validates API keys from Identity Core</li> <li>Permission Checks: Router validates entity permissions via Labels Core</li> <li>Session Management: Redis stores user sessions across modules</li> </ol>"},{"location":"core-modules/#configuration","title":"Configuration","text":""},{"location":"core-modules/#environment-variables","title":"Environment Variables","text":"<p>Each core module requires specific environment configuration:</p> Router ModuleIdentity CoreLabels Core <pre><code># Database\nDATABASE_URL=postgresql://user:pass@host:5432/waddlebot\nREAD_REPLICA_URL=postgresql://user:pass@read-host:5432/waddlebot\n\n# Redis\nREDIS_HOST=redis\nREDIS_PORT=6379\nSESSION_TTL=3600\n\n# Performance\nROUTER_MAX_WORKERS=20\nROUTER_MAX_CONCURRENT=100\n</code></pre> <pre><code># Module Configuration\nMODULE_NAME=identity_core_module\nMODULE_PORT=8050\n\n# Database &amp; Redis\nDATABASE_URL=postgresql://user:pass@host:5432/waddlebot\nREDIS_HOST=redis\n\n# Security\nSECRET_KEY=your_secret_key_change_me\nSESSION_TTL=3600\nVERIFICATION_CODE_LENGTH=6\n</code></pre> <pre><code># Performance Settings\nMAX_WORKERS=20\nCACHE_TTL=300\nBULK_OPERATION_SIZE=1000\n\n# Database &amp; Redis\nDATABASE_URL=postgresql://user:pass@host:5432/waddlebot\nREDIS_HOST=redis\n</code></pre>"},{"location":"core-modules/#database-schema","title":"Database Schema","text":"<p>Core modules create and manage their own database tables:</p> <ul> <li>Router: <code>commands</code>, <code>entities</code>, <code>command_executions</code>, <code>rate_limits</code></li> <li>Marketplace: <code>modules</code>, <code>installations</code>, <code>subscriptions</code></li> <li>Identity: <code>auth_user</code> (extended), <code>identity_links</code>, <code>api_keys</code></li> <li>Labels: <code>labels</code>, <code>user_labels</code>, <code>entity_groups</code></li> </ul>"},{"location":"core-modules/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"core-modules/#startup-order","title":"Startup Order","text":"<p>Deploy core modules in this order to handle dependencies:</p> <ol> <li>PostgreSQL and Redis (infrastructure)</li> <li>Identity Core (authentication foundation)</li> <li>Router Module (central command processing)</li> <li>Labels Core (community organization)</li> <li>Marketplace (module management)</li> <li>Portal and Browser Sources (user interfaces)</li> </ol>"},{"location":"core-modules/#health-checks","title":"Health Checks","text":"<p>All core modules provide health check endpoints:</p> <ul> <li><code>GET /health</code> - Basic service health</li> <li><code>GET /health/detailed</code> - Detailed health with dependency status</li> <li>Database connectivity verification</li> <li>Redis connection testing</li> <li>External service availability</li> </ul>"},{"location":"core-modules/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Router: Scale horizontally with coordination system</li> <li>Identity: Scale based on authentication load</li> <li>Labels: Handle high-volume labeling operations</li> <li>Browser Sources: Scale WebSocket connections as needed</li> </ul>"},{"location":"core-modules/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"core-modules/#key-metrics","title":"Key Metrics","text":"<p>Monitor these metrics for core module health:</p> <ul> <li>Response Times: API endpoint latency</li> <li>Throughput: Requests per second</li> <li>Error Rates: Failed requests and exceptions</li> <li>Database Performance: Query times and connection counts</li> <li>Cache Hit Rates: Redis performance metrics</li> </ul>"},{"location":"core-modules/#logging","title":"Logging","text":"<p>All core modules implement comprehensive AAA logging:</p> <ul> <li>Authentication Events: Login, logout, token operations</li> <li>Authorization Events: Permission checks and access control</li> <li>Audit Events: User actions and configuration changes</li> <li>System Events: Startup, shutdown, health status</li> </ul>"},{"location":"core-modules/#maintenance-tasks","title":"Maintenance Tasks","text":"<p>Regular maintenance for optimal performance:</p> <ul> <li>Database Cleanup: Archive old logs and sessions</li> <li>Cache Management: Monitor Redis memory usage</li> <li>Health Monitoring: Automated alerting for service issues</li> <li>Performance Tuning: Optimize based on usage patterns</li> </ul>"},{"location":"getting-started/","title":"Getting Started Overview","text":"<p>This section provides everything you need to get WaddleBot up and running in your environment. Whether you're setting up a development environment or deploying to production, we have guides to help you succeed.</p>"},{"location":"getting-started/#choose-your-path","title":"Choose Your Path","text":"\ud83d\ude80 Quick Start\ud83c\udfd7\ufe0f Production Deployment\ud83d\udd27 Development Setup <p>Perfect for trying out WaddleBot quickly:</p> <ul> <li>Time: 10-15 minutes</li> <li>Requirements: Docker and Docker Compose</li> <li>Platforms: Single platform (Discord, Twitch, or Slack)</li> <li>Use Case: Development, testing, small communities</li> </ul> <p>Next: Follow our Quick Start Guide</p> <p>For production-ready deployments:</p> <ul> <li>Time: 2-4 hours</li> <li>Requirements: Kubernetes cluster, PostgreSQL, Redis</li> <li>Platforms: Multi-platform support</li> <li>Use Case: Large communities, high availability</li> </ul> <p>Next: Read the Deployment Guide</p> <p>For contributors and module developers:</p> <ul> <li>Time: 30-60 minutes  </li> <li>Requirements: Python 3.12, development tools</li> <li>Platforms: Local development environment</li> <li>Use Case: Contributing code, building modules</li> </ul> <p>Next: Check Contributing Guidelines</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/#system-requirements","title":"System Requirements","text":"DevelopmentProduction <p>Minimum Requirements: - Python 3.12 or later - Docker and Docker Compose - 4GB RAM, 2 CPU cores - 10GB available disk space</p> <p>Recommended: - 8GB RAM, 4 CPU cores - SSD storage - Linux or macOS (Windows with WSL2)</p> <p>Minimum Requirements: - Kubernetes cluster (3 nodes) - PostgreSQL 14+ with read replicas - Redis 6+ cluster - 16GB RAM total, 8 CPU cores - 100GB available storage</p> <p>Recommended: - High-availability Kubernetes setup - Managed PostgreSQL and Redis services - Load balancer with SSL termination - Monitoring and logging infrastructure</p>"},{"location":"getting-started/#platform-prerequisites","title":"Platform Prerequisites","text":"<p>Before setting up WaddleBot, you'll need to create applications on the platforms you want to integrate:</p> DiscordTwitchSlack <p>Required: - Discord Developer Application - Bot token with appropriate permissions - Server with admin permissions for testing</p> <p>Permissions Needed: - Send Messages - Read Message History - Use Slash Commands - Manage Roles (optional)</p> <p>Setup Guide: Discord Platform Setup</p> <p>Required: - Twitch Developer Application - Client ID and Client Secret - EventSub webhook endpoint (HTTPS required)</p> <p>Scopes Needed: - <code>channel:read:subscriptions</code> - <code>bits:read</code> - <code>channel:read:redemptions</code> - <code>moderator:read:followers</code></p> <p>Setup Guide: Twitch Platform Setup</p> <p>Required: - Slack App in your workspace - Bot User OAuth Token - Event subscriptions endpoint</p> <p>Permissions Needed: - <code>chat:write</code> - <code>channels:read</code> - <code>users:read</code> - <code>reactions:write</code></p> <p>Setup Guide: Slack Platform Setup</p>"},{"location":"getting-started/#architecture-decision-tree","title":"Architecture Decision Tree","text":"<p>Use this flowchart to determine the best setup for your needs:</p> <pre><code>flowchart TD\n    A[Starting WaddleBot Setup] --&gt; B{What's your primary goal?}\n\n    B --&gt;|Try WaddleBot features| C[Development/Testing]\n    B --&gt;|Run for community| D[Production Use]\n    B --&gt;|Build modules| E[Module Development]\n\n    C --&gt; F{How many platforms?}\n    F --&gt;|Just one| G[Quick Start with Docker Compose]\n    F --&gt;|Multiple| H[Local Kubernetes with Kind]\n\n    D --&gt; I{Community size?}\n    I --&gt;|&lt; 1000 members| J[Single Node Kubernetes]\n    I --&gt;|&gt; 1000 members| K[Multi-Node Production Cluster]\n\n    E --&gt; L[Development Environment Setup]\n\n    G --&gt; M[Follow Quick Start Guide]\n    H --&gt; N[Local Multi-Platform Setup]\n    J --&gt; O[Production Deployment Guide]\n    K --&gt; P[High Availability Setup]\n    L --&gt; Q[Contributing Guidelines]</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/#1-choose-your-setup-path","title":"1. Choose Your Setup Path","text":"<p>Based on your needs, pick the appropriate setup guide:</p> <ul> <li>Quick Start: Get running in 15 minutes with Docker</li> <li>Production Deployment: Full production setup</li> <li>Development Setup: Environment for contributors</li> </ul>"},{"location":"getting-started/#2-platform-configuration","title":"2. Platform Configuration","text":"<p>Set up your platform integrations:</p> <ul> <li>Discord Integration</li> <li>Twitch Integration </li> <li>Slack Integration</li> </ul>"},{"location":"getting-started/#3-core-configuration","title":"3. Core Configuration","text":"<p>Configure the core system components:</p> <ul> <li>Router Configuration</li> <li>Identity Management</li> <li>Database Setup</li> </ul>"},{"location":"getting-started/#4-feature-modules","title":"4. Feature Modules","text":"<p>Enable the features your community needs:</p> <ul> <li>AI Chat Integration</li> <li>Music Integration</li> <li>Community Management</li> </ul>"},{"location":"getting-started/#5-administration","title":"5. Administration","text":"<p>Set up community management:</p> <ul> <li>Portal Access</li> <li>User Management</li> <li>Monitoring Setup</li> </ul>"},{"location":"getting-started/#common-setup-issues","title":"Common Setup Issues","text":"<p>HTTPS Requirement</p> <p>Most platforms (especially Twitch) require HTTPS endpoints for webhooks. For development, consider using ngrok or similar tools to expose your local server.</p> <p>Environment Variables</p> <p>WaddleBot uses environment variables extensively. Consider using a <code>.env</code> file or secret management system to organize your configuration.</p> <p>Database Migrations</p> <p>Each module manages its own database tables. Ensure your PostgreSQL user has CREATE TABLE permissions for automatic migrations.</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Discord/Twitch/Slack Issues: Check platform-specific documentation</li> <li>Setup Problems: Review our troubleshooting guide</li> <li>Development Questions: See contributing guidelines</li> <li>Bug Reports: GitHub Issues</li> </ul>"},{"location":"interaction-modules/","title":"Interaction Modules Overview","text":"<p>Interaction modules provide the functional features that communities use daily. Unlike core modules, interaction modules are optional and can be enabled or disabled per community based on their needs.</p>"},{"location":"interaction-modules/#module-categories","title":"Module Categories","text":""},{"location":"interaction-modules/#communication-ai","title":"\ud83e\udd16 Communication &amp; AI","text":"Module Purpose Key Features AI Interaction Chat responses with AI providers Ollama, OpenAI, MCP support Alias System Linux-style command aliases Variable substitution, nested commands"},{"location":"interaction-modules/#media-entertainment","title":"\ud83c\udfb5 Media &amp; Entertainment","text":"Module Purpose Key Features YouTube Music Music search and playback YouTube API, OBS integration Spotify Integration Music control and display OAuth, device control, playlists Shoutouts User recognition and clips Auto-shoutouts, Twitch clips"},{"location":"interaction-modules/#community-management","title":"\ud83d\uddc2\ufe0f Community Management","text":"Module Purpose Key Features Inventory Management Item tracking system Multi-threaded, label support Calendar Events Event management Approval workflows, recurring events Memories System Quote and reminder management Search, categorization, reminders"},{"location":"interaction-modules/#architecture-pattern","title":"Architecture Pattern","text":"<p>All interaction modules follow a consistent architecture pattern:</p> <pre><code>graph LR\n    R[Router Module] --&gt; IM[Interaction Module]\n    IM --&gt; DB[(Module Database)]\n    IM --&gt; API[External APIs]\n    IM --&gt; BS[Browser Sources]\n    IM --&gt; R\n\n    subgraph \"Module Structure\"\n        C[Controllers]\n        S[Services]\n        M[Models]\n    end\n\n    IM --&gt; C\n    C --&gt; S\n    S --&gt; M</code></pre>"},{"location":"interaction-modules/#standard-components","title":"Standard Components","text":"ControllersServicesModels <p>Handle HTTP requests and routing: <pre><code># Standard controller pattern\n@action\ndef process_command(self):\n    # Validate request\n    # Process command\n    # Return response\n</code></pre></p> <p>Business logic and external integrations: <pre><code># Service layer pattern\nclass ModuleService:\n    def __init__(self):\n        self.router_service = RouterService()\n        self.external_api = ExternalAPI()\n\n    def process_request(self, data):\n        # Business logic here\n        pass\n</code></pre></p> <p>Database schema and data models: <pre><code># py4web DAL models\ndb.define_table('module_data',\n    Field('community_id', 'string'),\n    Field('user_id', 'string'),\n    Field('data', 'json')\n)\n</code></pre></p>"},{"location":"interaction-modules/#communication-patterns","title":"Communication Patterns","text":""},{"location":"interaction-modules/#router-integration","title":"Router Integration","text":"<p>All interaction modules communicate with the Router Module:</p> <pre><code># Standard router communication\nresponse = requests.post(f\"{ROUTER_API_URL}/responses\", {\n    \"session_id\": session_id,\n    \"success\": True,\n    \"response_action\": \"chat\",\n    \"response_data\": {\n        \"message\": \"Command executed successfully\"\n    }\n})\n</code></pre>"},{"location":"interaction-modules/#response-types","title":"Response Types","text":"<p>Modules can return different response types:</p> Chat ResponseMedia ResponseTicker Response <pre><code>{\n    \"response_action\": \"chat\",\n    \"response_data\": {\n        \"message\": \"Hello from the AI module!\"\n    }\n}\n</code></pre> <pre><code>{\n    \"response_action\": \"media\", \n    \"response_data\": {\n        \"title\": \"Now Playing\",\n        \"artist\": \"Artist Name\",\n        \"album_art_url\": \"https://...\",\n        \"duration\": 180\n    }\n}\n</code></pre> <pre><code>{\n    \"response_action\": \"ticker\",\n    \"response_data\": {\n        \"text\": \"Welcome new follower!\",\n        \"duration\": 10,\n        \"priority\": \"high\"\n    }\n}\n</code></pre>"},{"location":"interaction-modules/#module-development","title":"Module Development","text":""},{"location":"interaction-modules/#creating-new-modules","title":"Creating New Modules","text":"<p>Follow this template structure for new interaction modules:</p> <pre><code>new_interaction_module/\n\u251c\u2500\u2500 Dockerfile                 # Container definition\n\u251c\u2500\u2500 app.py                    # Main py4web application\n\u251c\u2500\u2500 config.py                 # Configuration management\n\u251c\u2500\u2500 models.py                 # Database models\n\u251c\u2500\u2500 requirements.txt          # Python dependencies\n\u251c\u2500\u2500 services/                 # Business logic\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 module_service.py     # Core functionality\n\u2502   \u2514\u2500\u2500 router_service.py     # Router communication\n\u2514\u2500\u2500 k8s/                      # Kubernetes deployment\n    \u2514\u2500\u2500 deployment.yaml\n</code></pre>"},{"location":"interaction-modules/#standard-environment-variables","title":"Standard Environment Variables","text":"<p>Every interaction module should support these variables:</p> <pre><code># Module Identity\nMODULE_NAME=your_module_name\nMODULE_VERSION=1.0.0\nMODULE_PORT=8XXX\n\n# Database Connection\nDATABASE_URL=postgresql://user:pass@host:5432/waddlebot\n\n# Core API Integration\nCORE_API_URL=http://router-service:8000\nROUTER_API_URL=http://router-service:8000/router\n\n# Performance Settings\nMAX_WORKERS=20\nREQUEST_TIMEOUT=30\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"interaction-modules/#installation-management","title":"Installation &amp; Management","text":""},{"location":"interaction-modules/#module-registration","title":"Module Registration","text":"<p>Modules automatically register with the Marketplace on startup:</p> <ol> <li>Health Check: Marketplace verifies module is running</li> <li>Capability Discovery: Module reports supported commands</li> <li>Registration: Module added to available modules list</li> <li>Entity Assignment: Communities can install the module</li> </ol>"},{"location":"interaction-modules/#community-installation","title":"Community Installation","text":"<p>Community managers install modules through:</p> <ul> <li>Web Portal: Point-and-click installation interface</li> <li>Chat Commands: <code>!marketplace install module_name</code></li> <li>API Integration: Programmatic installation via REST API</li> </ul>"},{"location":"interaction-modules/#permission-system","title":"Permission System","text":"<p>Each module installation includes:</p> <ul> <li>Entity Permissions: Which communities can use the module</li> <li>User Permissions: Role-based access within communities</li> <li>Command Permissions: Granular control over specific commands</li> <li>Rate Limiting: Per-user and per-community limits</li> </ul>"},{"location":"interaction-modules/#performance-considerations","title":"Performance Considerations","text":""},{"location":"interaction-modules/#multi-threading","title":"Multi-threading","text":"<p>High-volume modules should use ThreadPoolExecutor:</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\n\nclass ModuleService:\n    def __init__(self):\n        self.executor = ThreadPoolExecutor(max_workers=20)\n\n    def process_bulk_operation(self, items):\n        futures = []\n        for item in items:\n            future = self.executor.submit(self.process_item, item)\n            futures.append(future)\n\n        return [f.result() for f in futures]\n</code></pre>"},{"location":"interaction-modules/#caching-strategy","title":"Caching Strategy","text":"<p>Implement caching for frequently accessed data:</p> <pre><code>import redis\nfrom functools import wraps\n\ndef cached(ttl=300):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache_key = f\"{func.__name__}:{hash(str(args)+str(kwargs))}\"\n            cached_result = redis_client.get(cache_key)\n\n            if cached_result:\n                return json.loads(cached_result)\n\n            result = func(*args, **kwargs)\n            redis_client.setex(cache_key, ttl, json.dumps(result))\n            return result\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"interaction-modules/#database-optimization","title":"Database Optimization","text":"<p>Use proper indexing and connection pooling:</p> <pre><code># Efficient database queries\ndb.executesql(\"\"\"\n    CREATE INDEX IF NOT EXISTS idx_community_user \n    ON module_data(community_id, user_id)\n\"\"\")\n\n# Bulk operations\ndb.executesql(\"\"\"\n    INSERT INTO module_data (community_id, user_id, data)\n    VALUES %s\n\"\"\", [values_list])\n</code></pre>"},{"location":"interaction-modules/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"interaction-modules/#health-endpoints","title":"Health Endpoints","text":"<p>Every module should provide health monitoring:</p> <pre><code>@action\ndef health(self):\n    return {\n        \"status\": \"healthy\",\n        \"module\": MODULE_NAME,\n        \"version\": MODULE_VERSION,\n        \"dependencies\": {\n            \"database\": check_database_connection(),\n            \"router\": check_router_connection(),\n            \"external_api\": check_external_api()\n        }\n    }\n</code></pre>"},{"location":"interaction-modules/#aaa-logging","title":"AAA Logging","text":"<p>Implement comprehensive Authentication, Authorization, and Auditing:</p> <pre><code>import logging\n\n# Structured logging format\nlogging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(message)s')\n\ndef log_user_action(community_id, user_id, action, result):\n    logger.info(\n        f\"AUDIT community={community_id} user={user_id} \"\n        f\"action={action} result={result}\"\n    )\n</code></pre>"},{"location":"interaction-modules/#best-practices","title":"Best Practices","text":""},{"location":"interaction-modules/#error-handling","title":"Error Handling","text":"<p>Always provide meaningful error responses:</p> <pre><code>try:\n    result = process_command(data)\n    return {\"success\": True, \"data\": result}\nexcept ValidationError as e:\n    return {\"success\": False, \"error\": f\"Invalid input: {e}\"}\nexcept ExternalAPIError as e:\n    return {\"success\": False, \"error\": \"External service unavailable\"}\nexcept Exception as e:\n    logger.exception(\"Unexpected error\")\n    return {\"success\": False, \"error\": \"Internal server error\"}\n</code></pre>"},{"location":"interaction-modules/#configuration-management","title":"Configuration Management","text":"<p>Use environment variables with sensible defaults:</p> <pre><code>import os\n\nclass Config:\n    MODULE_NAME = os.getenv('MODULE_NAME', 'default_module')\n    DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///app.db')\n    MAX_WORKERS = int(os.getenv('MAX_WORKERS', '10'))\n    REQUEST_TIMEOUT = int(os.getenv('REQUEST_TIMEOUT', '30'))\n</code></pre>"},{"location":"interaction-modules/#testing-strategy","title":"Testing Strategy","text":"<p>Include comprehensive tests:</p> <pre><code>import unittest\nfrom unittest.mock import Mock, patch\n\nclass TestModuleService(unittest.TestCase):\n    def setUp(self):\n        self.service = ModuleService()\n\n    def test_process_command_success(self):\n        # Test successful command processing\n        pass\n\n    def test_process_command_error_handling(self):\n        # Test error conditions\n        pass\n</code></pre>"},{"location":"interaction-modules/#next-steps","title":"Next Steps","text":"<ul> <li>AI Interaction: Set up AI-powered chat responses</li> <li>Music Integration: Add YouTube Music support</li> <li>Community Tools: Enable inventory management</li> <li>Development Guide: Build your own modules</li> </ul>"}]}