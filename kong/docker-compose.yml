# Kong API Gateway Docker Compose Configuration
# Provides unified API routing for WaddleBot services

version: '3.8'

services:
  # PostgreSQL for Kong
  kong-database:
    image: postgres:15-alpine
    container_name: waddlebot-kong-db
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong-postgres-data:/var/lib/postgresql/data
    networks:
      - waddlebot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Database Migration
  kong-migration:
    image: kong:3.4-alpine
    container_name: waddlebot-kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - waddlebot-network
    restart: "no"

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: waddlebot-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
    ports:
      - "8080:8000"    # Proxy port (main API gateway)
      - "8001:8001"    # Admin API port
      - "8002:8002"    # Kong Manager GUI port (if enabled)
    volumes:
      - ./kong.yml:/kong/kong.yml:ro
      - kong-logs:/var/log/kong
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    networks:
      - waddlebot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Konga - Kong Admin UI (Optional)
  konga:
    image: pantsel/konga:latest
    container_name: waddlebot-konga
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
    ports:
      - "1337:1337"
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - waddlebot-network
    restart: unless-stopped

  # Kong Deck for Configuration Management
  kong-deck:
    image: kong/deck:latest
    container_name: waddlebot-kong-deck
    volumes:
      - ./kong.yml:/kong/kong.yml:ro
      - ./scripts:/scripts:ro
    environment:
      DECK_KONG_ADDR: http://kong:8001
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - waddlebot-network
    restart: "no"
    command: >
      sh -c "
        echo 'Waiting for Kong to be ready...' &&
        sleep 30 &&
        deck validate --state /kong/kong.yml &&
        deck sync --state /kong/kong.yml
      "

volumes:
  kong-postgres-data:
    driver: local
  kong-logs:
    driver: local

networks:
  waddlebot-network:
    external: true