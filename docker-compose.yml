---
version: '3.8'

services:
  # Database Services
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - waddlebotnet
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waddlebot"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    networks:
      - waddlebotnet
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services
  router:
    image: waddlebot-router
    build:
      context: .
      dockerfile: router_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - ROUTER_MAX_WORKERS=${ROUTER_MAX_WORKERS}
      - ROUTER_MAX_CONCURRENT=${ROUTER_MAX_CONCURRENT}
      - MODULE_NAME=${MODULE_NAME_ROUTER}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/router/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  marketplace:
    image: waddlebot-marketplace
    build:
      context: .
      dockerfile: marketplace_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - ROUTER_API_URL=${ROUTER_API_URL}
      - MODULE_NAME=${MODULE_NAME_MARKETPLACE}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8001:8000"
    depends_on:
      router:
        condition: service_healthy

  portal:
    image: waddlebot-portal
    build:
      context: .
      dockerfile: portal_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_PORT=${SMTP_PORT}
    networks:
      - waddlebotnet
    ports:
      - "8002:8000"
    depends_on:
      router:
        condition: service_healthy

  # Collector Services
  twitch:
    image: waddlebot-twitch
    build:
      context: .
      dockerfile: twitch_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - CONTEXT_API_URL=${CONTEXT_API_URL}
      - REPUTATION_API_URL=${REPUTATION_API_URL}
      - GATEWAY_ACTIVATE_URL=${GATEWAY_ACTIVATE_URL}
      - TWITCH_APP_ID=${TWITCH_APP_ID}
      - TWITCH_APP_SECRET=${TWITCH_APP_SECRET}
      - TWITCH_WEBHOOK_SECRET=${TWITCH_WEBHOOK_SECRET}
      - TWITCH_WEBHOOK_CALLBACK_URL=${TWITCH_WEBHOOK_CALLBACK_URL}
      - TWITCH_REDIRECT_URI=${TWITCH_REDIRECT_URI}
      - MAX_CLAIMS=${MAX_CLAIMS}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL}
      - CONTAINER_ID=${CONTAINER_ID_TWITCH}
      - MODULE_NAME=${MODULE_NAME_TWITCH}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8003:8000"
    depends_on:
      router:
        condition: service_healthy

  discord:
    image: waddlebot-discord
    build:
      context: .
      dockerfile: discord_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - CONTEXT_API_URL=${CONTEXT_API_URL}
      - REPUTATION_API_URL=${REPUTATION_API_URL}
      - GATEWAY_ACTIVATE_URL=${GATEWAY_ACTIVATE_URL}
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_APPLICATION_ID=${DISCORD_APPLICATION_ID}
      - DISCORD_PUBLIC_KEY=${DISCORD_PUBLIC_KEY}
      - DISCORD_COMMAND_PREFIX=${DISCORD_COMMAND_PREFIX}
      - MAX_CLAIMS=${MAX_CLAIMS}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL}
      - CONTAINER_ID=${CONTAINER_ID_DISCORD}
      - MODULE_NAME=${MODULE_NAME_DISCORD}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8004:8000"
    depends_on:
      router:
        condition: service_healthy

  slack:
    image: waddlebot-slack
    build:
      context: .
      dockerfile: slack_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - CONTEXT_API_URL=${CONTEXT_API_URL}
      - REPUTATION_API_URL=${REPUTATION_API_URL}
      - GATEWAY_ACTIVATE_URL=${GATEWAY_ACTIVATE_URL}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_OAUTH_REDIRECT_URI=${SLACK_OAUTH_REDIRECT_URI}
      - SLACK_SOCKET_MODE=${SLACK_SOCKET_MODE}
      - MAX_CLAIMS=${MAX_CLAIMS}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL}
      - CONTAINER_ID=${CONTAINER_ID_SLACK}
      - MODULE_NAME=${MODULE_NAME_SLACK}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8005:8000"
    depends_on:
      router:
        condition: service_healthy

  # AI/Interaction Services
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks:
      - waddlebotnet
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  ai-interaction:
    image: waddlebot-ai-interaction
    build:
      context: .
      dockerfile: ai_interaction_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CORE_API_URL=${CORE_API_URL}
      - ROUTER_API_URL=${ROUTER_API_URL}
      # AI Provider Configuration
      - AI_PROVIDER=${AI_PROVIDER}
      - AI_HOST=${AI_HOST}
      - AI_PORT=${AI_PORT}
      - AI_API_KEY=${AI_API_KEY}
      - AI_MODEL=${AI_MODEL}
      - AI_TEMPERATURE=${AI_TEMPERATURE}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS}
      # OpenAI Configuration (if using OpenAI provider)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      # MCP Configuration (if using MCP provider)
      - MCP_SERVER_URL=${MCP_SERVER_URL}
      - MCP_TIMEOUT=${MCP_TIMEOUT}
      # System Configuration
      - SYSTEM_PROMPT=${SYSTEM_PROMPT}
      - QUESTION_TRIGGERS=${QUESTION_TRIGGERS}
      - RESPONSE_PREFIX=${RESPONSE_PREFIX}
      - MODULE_NAME=${MODULE_NAME_AI}
      - MODULE_VERSION=${MODULE_VERSION}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
      - ENABLE_CHAT_CONTEXT=${ENABLE_CHAT_CONTEXT}
      - CONTEXT_HISTORY_LIMIT=${CONTEXT_HISTORY_LIMIT}
      - RESPOND_TO_EVENTS=${RESPOND_TO_EVENTS}
      - EVENT_RESPONSE_TYPES=${EVENT_RESPONSE_TYPES}
    networks:
      - waddlebotnet
    ports:
      - "8005:8000"
    depends_on:
      router:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alias Interaction Module
  alias-interaction:
    image: waddlebot-alias-interaction
    build:
      context: .
      dockerfile: alias_interaction_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ROUTER_API_URL=${ROUTER_API_URL}
      - MODULE_NAME=${MODULE_NAME_ALIAS}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8010:8010"
    depends_on:
      router:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shoutout Interaction Module
  shoutout-interaction:
    image: waddlebot-shoutout-interaction
    build:
      context: .
      dockerfile: shoutout_interaction_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ROUTER_API_URL=${ROUTER_API_URL}
      - MODULE_NAME=${MODULE_NAME_SHOUTOUT}
      - MODULE_VERSION=${MODULE_VERSION}
      # Twitch API Configuration
      - TWITCH_CLIENT_ID=${TWITCH_CLIENT_ID}
      - TWITCH_CLIENT_SECRET=${TWITCH_CLIENT_SECRET}
      - TWITCH_ACCESS_TOKEN=${TWITCH_ACCESS_TOKEN}
    networks:
      - waddlebotnet
    ports:
      - "8011:8011"
    depends_on:
      router:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Admin Broker Service
  kong-admin-broker:
    image: waddlebot-kong-admin-broker
    build:
      context: .
      dockerfile: kong_admin_broker/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      # Kong Admin API Configuration
      - KONG_ADMIN_URL=${KONG_ADMIN_URL}
      - KONG_ADMIN_USERNAME=${KONG_ADMIN_USERNAME}
      - KONG_ADMIN_PASSWORD=${KONG_ADMIN_PASSWORD}
      # Broker Configuration
      - BROKER_SECRET_KEY=${BROKER_SECRET_KEY}
      - BROKER_API_KEY=${BROKER_API_KEY}
      - SUPER_ADMIN_GROUP=${SUPER_ADMIN_GROUP}
      - API_KEY_LENGTH=${API_KEY_LENGTH}
      - REQUIRE_EMAIL_VERIFICATION=${REQUIRE_EMAIL_VERIFICATION}
      - LOG_LEVEL=${LOG_LEVEL}
      # Email Configuration (optional)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS}
      - FROM_EMAIL=${FROM_EMAIL}
      # Module Info
      - MODULE_NAME=${MODULE_NAME_KONG_BROKER}
      - MODULE_VERSION=${MODULE_VERSION}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
    networks:
      - waddlebotnet
    ports:
      - "8007:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Labels Core Module
  labels-core:
    image: waddlebot-labels-core
    build:
      context: .
      dockerfile: labels_core_module/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CORE_API_URL=${CORE_API_URL}
      - ROUTER_API_URL=${ROUTER_API_URL}
      - MAX_WORKERS=${MAX_WORKERS}
      - CACHE_TTL=${CACHE_TTL}
      - BULK_OPERATION_SIZE=${BULK_OPERATION_SIZE}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
      - MODULE_NAME=${MODULE_NAME_LABELS}
      - MODULE_VERSION=${MODULE_VERSION}
    networks:
      - waddlebotnet
    ports:
      - "8012:8012"
    depends_on:
      router:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Legacy/Optional Services
  chat:
    image: waddlebot-chat
    build: chat/
    networks:
      - waddlebotnet
    depends_on:
      - router
networks:
  waddlebotnet:
    driver: bridge

volumes:
  db_data:
  redis_data:
  ollama_data:
